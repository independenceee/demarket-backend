
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Collection
 * 
 */
export type Collection = $Result.DefaultSelection<Prisma.$CollectionPayload>
/**
 * Model CollectionCategory
 * 
 */
export type CollectionCategory = $Result.DefaultSelection<Prisma.$CollectionCategoryPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Nft
 * 
 */
export type Nft = $Result.DefaultSelection<Prisma.$NftPayload>
/**
 * Model CartNft
 * 
 */
export type CartNft = $Result.DefaultSelection<Prisma.$CartNftPayload>
/**
 * Model Cart
 * 
 */
export type Cart = $Result.DefaultSelection<Prisma.$CartPayload>
/**
 * Model Guide
 * 
 */
export type Guide = $Result.DefaultSelection<Prisma.$GuidePayload>
/**
 * Model Blog
 * 
 */
export type Blog = $Result.DefaultSelection<Prisma.$BlogPayload>
/**
 * Model Statistics
 * 
 */
export type Statistics = $Result.DefaultSelection<Prisma.$StatisticsPayload>
/**
 * Model Founder
 * 
 */
export type Founder = $Result.DefaultSelection<Prisma.$FounderPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const StatusNft: {
  SOLDOUT: 'SOLDOUT',
  SELLING: 'SELLING'
};

export type StatusNft = (typeof StatusNft)[keyof typeof StatusNft]

}

export type StatusNft = $Enums.StatusNft

export const StatusNft: typeof $Enums.StatusNft

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.collection`: Exposes CRUD operations for the **Collection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Collections
    * const collections = await prisma.collection.findMany()
    * ```
    */
  get collection(): Prisma.CollectionDelegate<ExtArgs>;

  /**
   * `prisma.collectionCategory`: Exposes CRUD operations for the **CollectionCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollectionCategories
    * const collectionCategories = await prisma.collectionCategory.findMany()
    * ```
    */
  get collectionCategory(): Prisma.CollectionCategoryDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.nft`: Exposes CRUD operations for the **Nft** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nfts
    * const nfts = await prisma.nft.findMany()
    * ```
    */
  get nft(): Prisma.NftDelegate<ExtArgs>;

  /**
   * `prisma.cartNft`: Exposes CRUD operations for the **CartNft** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CartNfts
    * const cartNfts = await prisma.cartNft.findMany()
    * ```
    */
  get cartNft(): Prisma.CartNftDelegate<ExtArgs>;

  /**
   * `prisma.cart`: Exposes CRUD operations for the **Cart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carts
    * const carts = await prisma.cart.findMany()
    * ```
    */
  get cart(): Prisma.CartDelegate<ExtArgs>;

  /**
   * `prisma.guide`: Exposes CRUD operations for the **Guide** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guides
    * const guides = await prisma.guide.findMany()
    * ```
    */
  get guide(): Prisma.GuideDelegate<ExtArgs>;

  /**
   * `prisma.blog`: Exposes CRUD operations for the **Blog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Blogs
    * const blogs = await prisma.blog.findMany()
    * ```
    */
  get blog(): Prisma.BlogDelegate<ExtArgs>;

  /**
   * `prisma.statistics`: Exposes CRUD operations for the **Statistics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statistics
    * const statistics = await prisma.statistics.findMany()
    * ```
    */
  get statistics(): Prisma.StatisticsDelegate<ExtArgs>;

  /**
   * `prisma.founder`: Exposes CRUD operations for the **Founder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Founders
    * const founders = await prisma.founder.findMany()
    * ```
    */
  get founder(): Prisma.FounderDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Collection: 'Collection',
    CollectionCategory: 'CollectionCategory',
    Category: 'Category',
    Nft: 'Nft',
    CartNft: 'CartNft',
    Cart: 'Cart',
    Guide: 'Guide',
    Blog: 'Blog',
    Statistics: 'Statistics',
    Founder: 'Founder'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'account' | 'collection' | 'collectionCategory' | 'category' | 'nft' | 'cartNft' | 'cart' | 'guide' | 'blog' | 'statistics' | 'founder'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Collection: {
        payload: Prisma.$CollectionPayload<ExtArgs>
        fields: Prisma.CollectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollectionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollectionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          findFirst: {
            args: Prisma.CollectionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollectionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          findMany: {
            args: Prisma.CollectionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>[]
          }
          create: {
            args: Prisma.CollectionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          createMany: {
            args: Prisma.CollectionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CollectionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          update: {
            args: Prisma.CollectionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          deleteMany: {
            args: Prisma.CollectionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CollectionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CollectionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          aggregate: {
            args: Prisma.CollectionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCollection>
          }
          groupBy: {
            args: Prisma.CollectionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CollectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollectionCountArgs<ExtArgs>,
            result: $Utils.Optional<CollectionCountAggregateOutputType> | number
          }
        }
      }
      CollectionCategory: {
        payload: Prisma.$CollectionCategoryPayload<ExtArgs>
        fields: Prisma.CollectionCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollectionCategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollectionCategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionCategoryPayload>
          }
          findFirst: {
            args: Prisma.CollectionCategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollectionCategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionCategoryPayload>
          }
          findMany: {
            args: Prisma.CollectionCategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionCategoryPayload>[]
          }
          create: {
            args: Prisma.CollectionCategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionCategoryPayload>
          }
          createMany: {
            args: Prisma.CollectionCategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CollectionCategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionCategoryPayload>
          }
          update: {
            args: Prisma.CollectionCategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionCategoryPayload>
          }
          deleteMany: {
            args: Prisma.CollectionCategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CollectionCategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CollectionCategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CollectionCategoryPayload>
          }
          aggregate: {
            args: Prisma.CollectionCategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCollectionCategory>
          }
          groupBy: {
            args: Prisma.CollectionCategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CollectionCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollectionCategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CollectionCategoryCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Nft: {
        payload: Prisma.$NftPayload<ExtArgs>
        fields: Prisma.NftFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NftFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NftPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NftFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NftPayload>
          }
          findFirst: {
            args: Prisma.NftFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NftPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NftFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NftPayload>
          }
          findMany: {
            args: Prisma.NftFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NftPayload>[]
          }
          create: {
            args: Prisma.NftCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NftPayload>
          }
          createMany: {
            args: Prisma.NftCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NftDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NftPayload>
          }
          update: {
            args: Prisma.NftUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NftPayload>
          }
          deleteMany: {
            args: Prisma.NftDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NftUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NftUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NftPayload>
          }
          aggregate: {
            args: Prisma.NftAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNft>
          }
          groupBy: {
            args: Prisma.NftGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NftGroupByOutputType>[]
          }
          count: {
            args: Prisma.NftCountArgs<ExtArgs>,
            result: $Utils.Optional<NftCountAggregateOutputType> | number
          }
        }
      }
      CartNft: {
        payload: Prisma.$CartNftPayload<ExtArgs>
        fields: Prisma.CartNftFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartNftFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartNftPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartNftFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartNftPayload>
          }
          findFirst: {
            args: Prisma.CartNftFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartNftPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartNftFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartNftPayload>
          }
          findMany: {
            args: Prisma.CartNftFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartNftPayload>[]
          }
          create: {
            args: Prisma.CartNftCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartNftPayload>
          }
          createMany: {
            args: Prisma.CartNftCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CartNftDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartNftPayload>
          }
          update: {
            args: Prisma.CartNftUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartNftPayload>
          }
          deleteMany: {
            args: Prisma.CartNftDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CartNftUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CartNftUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartNftPayload>
          }
          aggregate: {
            args: Prisma.CartNftAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCartNft>
          }
          groupBy: {
            args: Prisma.CartNftGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CartNftGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartNftCountArgs<ExtArgs>,
            result: $Utils.Optional<CartNftCountAggregateOutputType> | number
          }
        }
      }
      Cart: {
        payload: Prisma.$CartPayload<ExtArgs>
        fields: Prisma.CartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          findFirst: {
            args: Prisma.CartFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          findMany: {
            args: Prisma.CartFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartPayload>[]
          }
          create: {
            args: Prisma.CartCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          createMany: {
            args: Prisma.CartCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CartDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          update: {
            args: Prisma.CartUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          deleteMany: {
            args: Prisma.CartDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CartUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CartUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          aggregate: {
            args: Prisma.CartAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCart>
          }
          groupBy: {
            args: Prisma.CartGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CartGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartCountArgs<ExtArgs>,
            result: $Utils.Optional<CartCountAggregateOutputType> | number
          }
        }
      }
      Guide: {
        payload: Prisma.$GuidePayload<ExtArgs>
        fields: Prisma.GuideFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GuideFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuidePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GuideFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>
          }
          findFirst: {
            args: Prisma.GuideFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuidePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GuideFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>
          }
          findMany: {
            args: Prisma.GuideFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>[]
          }
          create: {
            args: Prisma.GuideCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>
          }
          createMany: {
            args: Prisma.GuideCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GuideDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>
          }
          update: {
            args: Prisma.GuideUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>
          }
          deleteMany: {
            args: Prisma.GuideDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GuideUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GuideUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GuidePayload>
          }
          aggregate: {
            args: Prisma.GuideAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGuide>
          }
          groupBy: {
            args: Prisma.GuideGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GuideGroupByOutputType>[]
          }
          count: {
            args: Prisma.GuideCountArgs<ExtArgs>,
            result: $Utils.Optional<GuideCountAggregateOutputType> | number
          }
        }
      }
      Blog: {
        payload: Prisma.$BlogPayload<ExtArgs>
        fields: Prisma.BlogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          findFirst: {
            args: Prisma.BlogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          findMany: {
            args: Prisma.BlogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>[]
          }
          create: {
            args: Prisma.BlogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          createMany: {
            args: Prisma.BlogCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BlogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          update: {
            args: Prisma.BlogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          deleteMany: {
            args: Prisma.BlogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BlogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BlogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          aggregate: {
            args: Prisma.BlogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBlog>
          }
          groupBy: {
            args: Prisma.BlogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BlogGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlogCountArgs<ExtArgs>,
            result: $Utils.Optional<BlogCountAggregateOutputType> | number
          }
        }
      }
      Statistics: {
        payload: Prisma.$StatisticsPayload<ExtArgs>
        fields: Prisma.StatisticsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatisticsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatisticsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticsPayload>
          }
          findFirst: {
            args: Prisma.StatisticsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatisticsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticsPayload>
          }
          findMany: {
            args: Prisma.StatisticsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticsPayload>[]
          }
          create: {
            args: Prisma.StatisticsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticsPayload>
          }
          createMany: {
            args: Prisma.StatisticsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StatisticsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticsPayload>
          }
          update: {
            args: Prisma.StatisticsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticsPayload>
          }
          deleteMany: {
            args: Prisma.StatisticsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatisticsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatisticsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatisticsPayload>
          }
          aggregate: {
            args: Prisma.StatisticsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStatistics>
          }
          groupBy: {
            args: Prisma.StatisticsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatisticsGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatisticsCountArgs<ExtArgs>,
            result: $Utils.Optional<StatisticsCountAggregateOutputType> | number
          }
        }
      }
      Founder: {
        payload: Prisma.$FounderPayload<ExtArgs>
        fields: Prisma.FounderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FounderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FounderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FounderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>
          }
          findFirst: {
            args: Prisma.FounderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FounderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FounderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>
          }
          findMany: {
            args: Prisma.FounderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>[]
          }
          create: {
            args: Prisma.FounderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>
          }
          createMany: {
            args: Prisma.FounderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FounderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>
          }
          update: {
            args: Prisma.FounderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>
          }
          deleteMany: {
            args: Prisma.FounderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FounderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FounderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>
          }
          aggregate: {
            args: Prisma.FounderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFounder>
          }
          groupBy: {
            args: Prisma.FounderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FounderGroupByOutputType>[]
          }
          count: {
            args: Prisma.FounderCountArgs<ExtArgs>,
            result: $Utils.Optional<FounderCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AccountCountOutputType
   */

  export type AccountCountOutputType = {
    collections: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collections?: boolean | AccountCountOutputTypeCountCollectionsArgs
  }

  // Custom InputTypes

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountCollectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionWhereInput
  }



  /**
   * Count Type CollectionCountOutputType
   */

  export type CollectionCountOutputType = {
    nfts: number
    categories: number
  }

  export type CollectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nfts?: boolean | CollectionCountOutputTypeCountNftsArgs
    categories?: boolean | CollectionCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes

  /**
   * CollectionCountOutputType without action
   */
  export type CollectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCountOutputType
     */
    select?: CollectionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CollectionCountOutputType without action
   */
  export type CollectionCountOutputTypeCountNftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NftWhereInput
  }


  /**
   * CollectionCountOutputType without action
   */
  export type CollectionCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionCategoryWhereInput
  }



  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    collections: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collections?: boolean | CategoryCountOutputTypeCountCollectionsArgs
  }

  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountCollectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionCategoryWhereInput
  }



  /**
   * Count Type NftCountOutputType
   */

  export type NftCountOutputType = {
    cart: number
  }

  export type NftCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart?: boolean | NftCountOutputTypeCountCartArgs
  }

  // Custom InputTypes

  /**
   * NftCountOutputType without action
   */
  export type NftCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NftCountOutputType
     */
    select?: NftCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * NftCountOutputType without action
   */
  export type NftCountOutputTypeCountCartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartNftWhereInput
  }



  /**
   * Count Type CartCountOutputType
   */

  export type CartCountOutputType = {
    nfts: number
  }

  export type CartCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nfts?: boolean | CartCountOutputTypeCountNftsArgs
  }

  // Custom InputTypes

  /**
   * CartCountOutputType without action
   */
  export type CartCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartCountOutputType
     */
    select?: CartCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CartCountOutputType without action
   */
  export type CartCountOutputTypeCountNftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartNftWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    rating: number | null
    followed: number | null
  }

  export type AccountSumAggregateOutputType = {
    rating: number | null
    followed: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    policyId: string | null
    address: string | null
    email: string | null
    name: string | null
    description: string | null
    rating: number | null
    cover: string | null
    avatar: string | null
    followed: number | null
    validate: boolean | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    policyId: string | null
    address: string | null
    email: string | null
    name: string | null
    description: string | null
    rating: number | null
    cover: string | null
    avatar: string | null
    followed: number | null
    validate: boolean | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    policyId: number
    address: number
    email: number
    name: number
    description: number
    rating: number
    cover: number
    avatar: number
    socialMediaUrl: number
    followed: number
    validate: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    rating?: true
    followed?: true
  }

  export type AccountSumAggregateInputType = {
    rating?: true
    followed?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    policyId?: true
    address?: true
    email?: true
    name?: true
    description?: true
    rating?: true
    cover?: true
    avatar?: true
    followed?: true
    validate?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    policyId?: true
    address?: true
    email?: true
    name?: true
    description?: true
    rating?: true
    cover?: true
    avatar?: true
    followed?: true
    validate?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    policyId?: true
    address?: true
    email?: true
    name?: true
    description?: true
    rating?: true
    cover?: true
    avatar?: true
    socialMediaUrl?: true
    followed?: true
    validate?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    policyId: string
    address: string
    email: string
    name: string
    description: string
    rating: number | null
    cover: string
    avatar: string
    socialMediaUrl: string[]
    followed: number | null
    validate: boolean
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    policyId?: boolean
    address?: boolean
    email?: boolean
    name?: boolean
    description?: boolean
    rating?: boolean
    cover?: boolean
    avatar?: boolean
    socialMediaUrl?: boolean
    followed?: boolean
    validate?: boolean
    cart?: boolean | Account$cartArgs<ExtArgs>
    collections?: boolean | Account$collectionsArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    policyId?: boolean
    address?: boolean
    email?: boolean
    name?: boolean
    description?: boolean
    rating?: boolean
    cover?: boolean
    avatar?: boolean
    socialMediaUrl?: boolean
    followed?: boolean
    validate?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart?: boolean | Account$cartArgs<ExtArgs>
    collections?: boolean | Account$collectionsArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      cart: Prisma.$CartPayload<ExtArgs> | null
      collections: Prisma.$CollectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      policyId: string
      address: string
      email: string
      name: string
      description: string
      rating: number | null
      cover: string
      avatar: string
      socialMediaUrl: string[]
      followed: number | null
      validate: boolean
    }, ExtArgs["result"]["account"]>
    composites: {}
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cart<T extends Account$cartArgs<ExtArgs> = {}>(args?: Subset<T, Account$cartArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    collections<T extends Account$collectionsArgs<ExtArgs> = {}>(args?: Subset<T, Account$collectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
    readonly policyId: FieldRef<"Account", 'String'>
    readonly address: FieldRef<"Account", 'String'>
    readonly email: FieldRef<"Account", 'String'>
    readonly name: FieldRef<"Account", 'String'>
    readonly description: FieldRef<"Account", 'String'>
    readonly rating: FieldRef<"Account", 'Float'>
    readonly cover: FieldRef<"Account", 'String'>
    readonly avatar: FieldRef<"Account", 'String'>
    readonly socialMediaUrl: FieldRef<"Account", 'String[]'>
    readonly followed: FieldRef<"Account", 'Int'>
    readonly validate: FieldRef<"Account", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account.cart
   */
  export type Account$cartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartInclude<ExtArgs> | null
    where?: CartWhereInput
  }


  /**
   * Account.collections
   */
  export type Account$collectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionInclude<ExtArgs> | null
    where?: CollectionWhereInput
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    cursor?: CollectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }


  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
  }



  /**
   * Model Collection
   */

  export type AggregateCollection = {
    _count: CollectionCountAggregateOutputType | null
    _min: CollectionMinAggregateOutputType | null
    _max: CollectionMaxAggregateOutputType | null
  }

  export type CollectionMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    title: string | null
    description: string | null
    avatar: string | null
    cover: string | null
    url: string | null
    accoutnId: string | null
  }

  export type CollectionMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    title: string | null
    description: string | null
    avatar: string | null
    cover: string | null
    url: string | null
    accoutnId: string | null
  }

  export type CollectionCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    title: number
    description: number
    avatar: number
    cover: number
    url: number
    accoutnId: number
    _all: number
  }


  export type CollectionMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    description?: true
    avatar?: true
    cover?: true
    url?: true
    accoutnId?: true
  }

  export type CollectionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    description?: true
    avatar?: true
    cover?: true
    url?: true
    accoutnId?: true
  }

  export type CollectionCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    description?: true
    avatar?: true
    cover?: true
    url?: true
    accoutnId?: true
    _all?: true
  }

  export type CollectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Collection to aggregate.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Collections
    **/
    _count?: true | CollectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollectionMaxAggregateInputType
  }

  export type GetCollectionAggregateType<T extends CollectionAggregateArgs> = {
        [P in keyof T & keyof AggregateCollection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollection[P]>
      : GetScalarType<T[P], AggregateCollection[P]>
  }




  export type CollectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionWhereInput
    orderBy?: CollectionOrderByWithAggregationInput | CollectionOrderByWithAggregationInput[]
    by: CollectionScalarFieldEnum[] | CollectionScalarFieldEnum
    having?: CollectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollectionCountAggregateInputType | true
    _min?: CollectionMinAggregateInputType
    _max?: CollectionMaxAggregateInputType
  }

  export type CollectionGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    title: string | null
    description: string | null
    avatar: string | null
    cover: string | null
    url: string | null
    accoutnId: string
    _count: CollectionCountAggregateOutputType | null
    _min: CollectionMinAggregateOutputType | null
    _max: CollectionMaxAggregateOutputType | null
  }

  type GetCollectionGroupByPayload<T extends CollectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollectionGroupByOutputType[P]>
            : GetScalarType<T[P], CollectionGroupByOutputType[P]>
        }
      >
    >


  export type CollectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    description?: boolean
    avatar?: boolean
    cover?: boolean
    url?: boolean
    accoutnId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    nfts?: boolean | Collection$nftsArgs<ExtArgs>
    categories?: boolean | Collection$categoriesArgs<ExtArgs>
    _count?: boolean | CollectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collection"]>

  export type CollectionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    description?: boolean
    avatar?: boolean
    cover?: boolean
    url?: boolean
    accoutnId?: boolean
  }

  export type CollectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    nfts?: boolean | Collection$nftsArgs<ExtArgs>
    categories?: boolean | Collection$categoriesArgs<ExtArgs>
    _count?: boolean | CollectionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CollectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Collection"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      nfts: Prisma.$NftPayload<ExtArgs>[]
      categories: Prisma.$CollectionCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      title: string | null
      description: string | null
      avatar: string | null
      cover: string | null
      url: string | null
      accoutnId: string
    }, ExtArgs["result"]["collection"]>
    composites: {}
  }


  type CollectionGetPayload<S extends boolean | null | undefined | CollectionDefaultArgs> = $Result.GetResult<Prisma.$CollectionPayload, S>

  type CollectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollectionFindManyArgs, 'select' | 'include'> & {
      select?: CollectionCountAggregateInputType | true
    }

  export interface CollectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Collection'], meta: { name: 'Collection' } }
    /**
     * Find zero or one Collection that matches the filter.
     * @param {CollectionFindUniqueArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CollectionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionFindUniqueArgs<ExtArgs>>
    ): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Collection that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CollectionFindUniqueOrThrowArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CollectionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Collection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionFindFirstArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CollectionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionFindFirstArgs<ExtArgs>>
    ): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Collection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionFindFirstOrThrowArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CollectionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Collections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Collections
     * const collections = await prisma.collection.findMany()
     * 
     * // Get first 10 Collections
     * const collections = await prisma.collection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collectionWithIdOnly = await prisma.collection.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CollectionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Collection.
     * @param {CollectionCreateArgs} args - Arguments to create a Collection.
     * @example
     * // Create one Collection
     * const Collection = await prisma.collection.create({
     *   data: {
     *     // ... data to create a Collection
     *   }
     * })
     * 
    **/
    create<T extends CollectionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionCreateArgs<ExtArgs>>
    ): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Collections.
     *     @param {CollectionCreateManyArgs} args - Arguments to create many Collections.
     *     @example
     *     // Create many Collections
     *     const collection = await prisma.collection.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CollectionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Collection.
     * @param {CollectionDeleteArgs} args - Arguments to delete one Collection.
     * @example
     * // Delete one Collection
     * const Collection = await prisma.collection.delete({
     *   where: {
     *     // ... filter to delete one Collection
     *   }
     * })
     * 
    **/
    delete<T extends CollectionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionDeleteArgs<ExtArgs>>
    ): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Collection.
     * @param {CollectionUpdateArgs} args - Arguments to update one Collection.
     * @example
     * // Update one Collection
     * const collection = await prisma.collection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CollectionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionUpdateArgs<ExtArgs>>
    ): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Collections.
     * @param {CollectionDeleteManyArgs} args - Arguments to filter Collections to delete.
     * @example
     * // Delete a few Collections
     * const { count } = await prisma.collection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CollectionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Collections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Collections
     * const collection = await prisma.collection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CollectionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Collection.
     * @param {CollectionUpsertArgs} args - Arguments to update or create a Collection.
     * @example
     * // Update or create a Collection
     * const collection = await prisma.collection.upsert({
     *   create: {
     *     // ... data to create a Collection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Collection we want to update
     *   }
     * })
    **/
    upsert<T extends CollectionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionUpsertArgs<ExtArgs>>
    ): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Collections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionCountArgs} args - Arguments to filter Collections to count.
     * @example
     * // Count the number of Collections
     * const count = await prisma.collection.count({
     *   where: {
     *     // ... the filter for the Collections we want to count
     *   }
     * })
    **/
    count<T extends CollectionCountArgs>(
      args?: Subset<T, CollectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Collection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollectionAggregateArgs>(args: Subset<T, CollectionAggregateArgs>): Prisma.PrismaPromise<GetCollectionAggregateType<T>>

    /**
     * Group by Collection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollectionGroupByArgs['orderBy'] }
        : { orderBy?: CollectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Collection model
   */
  readonly fields: CollectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Collection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    nfts<T extends Collection$nftsArgs<ExtArgs> = {}>(args?: Subset<T, Collection$nftsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NftPayload<ExtArgs>, T, 'findMany'> | Null>;

    categories<T extends Collection$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Collection$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionCategoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Collection model
   */ 
  interface CollectionFieldRefs {
    readonly id: FieldRef<"Collection", 'String'>
    readonly createdAt: FieldRef<"Collection", 'DateTime'>
    readonly updatedAt: FieldRef<"Collection", 'DateTime'>
    readonly title: FieldRef<"Collection", 'String'>
    readonly description: FieldRef<"Collection", 'String'>
    readonly avatar: FieldRef<"Collection", 'String'>
    readonly cover: FieldRef<"Collection", 'String'>
    readonly url: FieldRef<"Collection", 'String'>
    readonly accoutnId: FieldRef<"Collection", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Collection findUnique
   */
  export type CollectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where: CollectionWhereUniqueInput
  }


  /**
   * Collection findUniqueOrThrow
   */
  export type CollectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where: CollectionWhereUniqueInput
  }


  /**
   * Collection findFirst
   */
  export type CollectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Collections.
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Collections.
     */
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }


  /**
   * Collection findFirstOrThrow
   */
  export type CollectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Collections.
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Collections.
     */
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }


  /**
   * Collection findMany
   */
  export type CollectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collections to fetch.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Collections.
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }


  /**
   * Collection create
   */
  export type CollectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Collection.
     */
    data: XOR<CollectionCreateInput, CollectionUncheckedCreateInput>
  }


  /**
   * Collection createMany
   */
  export type CollectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Collections.
     */
    data: CollectionCreateManyInput | CollectionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Collection update
   */
  export type CollectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Collection.
     */
    data: XOR<CollectionUpdateInput, CollectionUncheckedUpdateInput>
    /**
     * Choose, which Collection to update.
     */
    where: CollectionWhereUniqueInput
  }


  /**
   * Collection updateMany
   */
  export type CollectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Collections.
     */
    data: XOR<CollectionUpdateManyMutationInput, CollectionUncheckedUpdateManyInput>
    /**
     * Filter which Collections to update
     */
    where?: CollectionWhereInput
  }


  /**
   * Collection upsert
   */
  export type CollectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Collection to update in case it exists.
     */
    where: CollectionWhereUniqueInput
    /**
     * In case the Collection found by the `where` argument doesn't exist, create a new Collection with this data.
     */
    create: XOR<CollectionCreateInput, CollectionUncheckedCreateInput>
    /**
     * In case the Collection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollectionUpdateInput, CollectionUncheckedUpdateInput>
  }


  /**
   * Collection delete
   */
  export type CollectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter which Collection to delete.
     */
    where: CollectionWhereUniqueInput
  }


  /**
   * Collection deleteMany
   */
  export type CollectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Collections to delete
     */
    where?: CollectionWhereInput
  }


  /**
   * Collection.nfts
   */
  export type Collection$nftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nft
     */
    select?: NftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NftInclude<ExtArgs> | null
    where?: NftWhereInput
    orderBy?: NftOrderByWithRelationInput | NftOrderByWithRelationInput[]
    cursor?: NftWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NftScalarFieldEnum | NftScalarFieldEnum[]
  }


  /**
   * Collection.categories
   */
  export type Collection$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCategory
     */
    select?: CollectionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionCategoryInclude<ExtArgs> | null
    where?: CollectionCategoryWhereInput
    orderBy?: CollectionCategoryOrderByWithRelationInput | CollectionCategoryOrderByWithRelationInput[]
    cursor?: CollectionCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionCategoryScalarFieldEnum | CollectionCategoryScalarFieldEnum[]
  }


  /**
   * Collection without action
   */
  export type CollectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionInclude<ExtArgs> | null
  }



  /**
   * Model CollectionCategory
   */

  export type AggregateCollectionCategory = {
    _count: CollectionCategoryCountAggregateOutputType | null
    _min: CollectionCategoryMinAggregateOutputType | null
    _max: CollectionCategoryMaxAggregateOutputType | null
  }

  export type CollectionCategoryMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    collectionId: string | null
    categoryId: string | null
  }

  export type CollectionCategoryMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    collectionId: string | null
    categoryId: string | null
  }

  export type CollectionCategoryCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    collectionId: number
    categoryId: number
    _all: number
  }


  export type CollectionCategoryMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    collectionId?: true
    categoryId?: true
  }

  export type CollectionCategoryMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    collectionId?: true
    categoryId?: true
  }

  export type CollectionCategoryCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    collectionId?: true
    categoryId?: true
    _all?: true
  }

  export type CollectionCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollectionCategory to aggregate.
     */
    where?: CollectionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionCategories to fetch.
     */
    orderBy?: CollectionCategoryOrderByWithRelationInput | CollectionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollectionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CollectionCategories
    **/
    _count?: true | CollectionCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollectionCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollectionCategoryMaxAggregateInputType
  }

  export type GetCollectionCategoryAggregateType<T extends CollectionCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCollectionCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollectionCategory[P]>
      : GetScalarType<T[P], AggregateCollectionCategory[P]>
  }




  export type CollectionCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionCategoryWhereInput
    orderBy?: CollectionCategoryOrderByWithAggregationInput | CollectionCategoryOrderByWithAggregationInput[]
    by: CollectionCategoryScalarFieldEnum[] | CollectionCategoryScalarFieldEnum
    having?: CollectionCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollectionCategoryCountAggregateInputType | true
    _min?: CollectionCategoryMinAggregateInputType
    _max?: CollectionCategoryMaxAggregateInputType
  }

  export type CollectionCategoryGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    collectionId: string
    categoryId: string
    _count: CollectionCategoryCountAggregateOutputType | null
    _min: CollectionCategoryMinAggregateOutputType | null
    _max: CollectionCategoryMaxAggregateOutputType | null
  }

  type GetCollectionCategoryGroupByPayload<T extends CollectionCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollectionCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollectionCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollectionCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CollectionCategoryGroupByOutputType[P]>
        }
      >
    >


  export type CollectionCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updatedAt?: boolean
    collectionId?: boolean
    categoryId?: boolean
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collectionCategory"]>

  export type CollectionCategorySelectScalar = {
    createdAt?: boolean
    updatedAt?: boolean
    collectionId?: boolean
    categoryId?: boolean
  }

  export type CollectionCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }


  export type $CollectionCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CollectionCategory"
    objects: {
      collection: Prisma.$CollectionPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      updatedAt: Date
      collectionId: string
      categoryId: string
    }, ExtArgs["result"]["collectionCategory"]>
    composites: {}
  }


  type CollectionCategoryGetPayload<S extends boolean | null | undefined | CollectionCategoryDefaultArgs> = $Result.GetResult<Prisma.$CollectionCategoryPayload, S>

  type CollectionCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollectionCategoryFindManyArgs, 'select' | 'include'> & {
      select?: CollectionCategoryCountAggregateInputType | true
    }

  export interface CollectionCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollectionCategory'], meta: { name: 'CollectionCategory' } }
    /**
     * Find zero or one CollectionCategory that matches the filter.
     * @param {CollectionCategoryFindUniqueArgs} args - Arguments to find a CollectionCategory
     * @example
     * // Get one CollectionCategory
     * const collectionCategory = await prisma.collectionCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CollectionCategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionCategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CollectionCategoryClient<$Result.GetResult<Prisma.$CollectionCategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CollectionCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CollectionCategoryFindUniqueOrThrowArgs} args - Arguments to find a CollectionCategory
     * @example
     * // Get one CollectionCategory
     * const collectionCategory = await prisma.collectionCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CollectionCategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionCategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CollectionCategoryClient<$Result.GetResult<Prisma.$CollectionCategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CollectionCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionCategoryFindFirstArgs} args - Arguments to find a CollectionCategory
     * @example
     * // Get one CollectionCategory
     * const collectionCategory = await prisma.collectionCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CollectionCategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionCategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CollectionCategoryClient<$Result.GetResult<Prisma.$CollectionCategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CollectionCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionCategoryFindFirstOrThrowArgs} args - Arguments to find a CollectionCategory
     * @example
     * // Get one CollectionCategory
     * const collectionCategory = await prisma.collectionCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CollectionCategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionCategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CollectionCategoryClient<$Result.GetResult<Prisma.$CollectionCategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CollectionCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CollectionCategories
     * const collectionCategories = await prisma.collectionCategory.findMany()
     * 
     * // Get first 10 CollectionCategories
     * const collectionCategories = await prisma.collectionCategory.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const collectionCategoryWithCreatedAtOnly = await prisma.collectionCategory.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends CollectionCategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionCategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionCategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CollectionCategory.
     * @param {CollectionCategoryCreateArgs} args - Arguments to create a CollectionCategory.
     * @example
     * // Create one CollectionCategory
     * const CollectionCategory = await prisma.collectionCategory.create({
     *   data: {
     *     // ... data to create a CollectionCategory
     *   }
     * })
     * 
    **/
    create<T extends CollectionCategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionCategoryCreateArgs<ExtArgs>>
    ): Prisma__CollectionCategoryClient<$Result.GetResult<Prisma.$CollectionCategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CollectionCategories.
     *     @param {CollectionCategoryCreateManyArgs} args - Arguments to create many CollectionCategories.
     *     @example
     *     // Create many CollectionCategories
     *     const collectionCategory = await prisma.collectionCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CollectionCategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionCategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CollectionCategory.
     * @param {CollectionCategoryDeleteArgs} args - Arguments to delete one CollectionCategory.
     * @example
     * // Delete one CollectionCategory
     * const CollectionCategory = await prisma.collectionCategory.delete({
     *   where: {
     *     // ... filter to delete one CollectionCategory
     *   }
     * })
     * 
    **/
    delete<T extends CollectionCategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionCategoryDeleteArgs<ExtArgs>>
    ): Prisma__CollectionCategoryClient<$Result.GetResult<Prisma.$CollectionCategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CollectionCategory.
     * @param {CollectionCategoryUpdateArgs} args - Arguments to update one CollectionCategory.
     * @example
     * // Update one CollectionCategory
     * const collectionCategory = await prisma.collectionCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CollectionCategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionCategoryUpdateArgs<ExtArgs>>
    ): Prisma__CollectionCategoryClient<$Result.GetResult<Prisma.$CollectionCategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CollectionCategories.
     * @param {CollectionCategoryDeleteManyArgs} args - Arguments to filter CollectionCategories to delete.
     * @example
     * // Delete a few CollectionCategories
     * const { count } = await prisma.collectionCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CollectionCategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CollectionCategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CollectionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CollectionCategories
     * const collectionCategory = await prisma.collectionCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CollectionCategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionCategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CollectionCategory.
     * @param {CollectionCategoryUpsertArgs} args - Arguments to update or create a CollectionCategory.
     * @example
     * // Update or create a CollectionCategory
     * const collectionCategory = await prisma.collectionCategory.upsert({
     *   create: {
     *     // ... data to create a CollectionCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CollectionCategory we want to update
     *   }
     * })
    **/
    upsert<T extends CollectionCategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CollectionCategoryUpsertArgs<ExtArgs>>
    ): Prisma__CollectionCategoryClient<$Result.GetResult<Prisma.$CollectionCategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CollectionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionCategoryCountArgs} args - Arguments to filter CollectionCategories to count.
     * @example
     * // Count the number of CollectionCategories
     * const count = await prisma.collectionCategory.count({
     *   where: {
     *     // ... the filter for the CollectionCategories we want to count
     *   }
     * })
    **/
    count<T extends CollectionCategoryCountArgs>(
      args?: Subset<T, CollectionCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollectionCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CollectionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollectionCategoryAggregateArgs>(args: Subset<T, CollectionCategoryAggregateArgs>): Prisma.PrismaPromise<GetCollectionCategoryAggregateType<T>>

    /**
     * Group by CollectionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollectionCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollectionCategoryGroupByArgs['orderBy'] }
        : { orderBy?: CollectionCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollectionCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CollectionCategory model
   */
  readonly fields: CollectionCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CollectionCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollectionCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    collection<T extends CollectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CollectionDefaultArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CollectionCategory model
   */ 
  interface CollectionCategoryFieldRefs {
    readonly createdAt: FieldRef<"CollectionCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"CollectionCategory", 'DateTime'>
    readonly collectionId: FieldRef<"CollectionCategory", 'String'>
    readonly categoryId: FieldRef<"CollectionCategory", 'String'>
  }
    

  // Custom InputTypes

  /**
   * CollectionCategory findUnique
   */
  export type CollectionCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCategory
     */
    select?: CollectionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CollectionCategory to fetch.
     */
    where: CollectionCategoryWhereUniqueInput
  }


  /**
   * CollectionCategory findUniqueOrThrow
   */
  export type CollectionCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCategory
     */
    select?: CollectionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CollectionCategory to fetch.
     */
    where: CollectionCategoryWhereUniqueInput
  }


  /**
   * CollectionCategory findFirst
   */
  export type CollectionCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCategory
     */
    select?: CollectionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CollectionCategory to fetch.
     */
    where?: CollectionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionCategories to fetch.
     */
    orderBy?: CollectionCategoryOrderByWithRelationInput | CollectionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollectionCategories.
     */
    cursor?: CollectionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollectionCategories.
     */
    distinct?: CollectionCategoryScalarFieldEnum | CollectionCategoryScalarFieldEnum[]
  }


  /**
   * CollectionCategory findFirstOrThrow
   */
  export type CollectionCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCategory
     */
    select?: CollectionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CollectionCategory to fetch.
     */
    where?: CollectionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionCategories to fetch.
     */
    orderBy?: CollectionCategoryOrderByWithRelationInput | CollectionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollectionCategories.
     */
    cursor?: CollectionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollectionCategories.
     */
    distinct?: CollectionCategoryScalarFieldEnum | CollectionCategoryScalarFieldEnum[]
  }


  /**
   * CollectionCategory findMany
   */
  export type CollectionCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCategory
     */
    select?: CollectionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CollectionCategories to fetch.
     */
    where?: CollectionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollectionCategories to fetch.
     */
    orderBy?: CollectionCategoryOrderByWithRelationInput | CollectionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CollectionCategories.
     */
    cursor?: CollectionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollectionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollectionCategories.
     */
    skip?: number
    distinct?: CollectionCategoryScalarFieldEnum | CollectionCategoryScalarFieldEnum[]
  }


  /**
   * CollectionCategory create
   */
  export type CollectionCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCategory
     */
    select?: CollectionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a CollectionCategory.
     */
    data: XOR<CollectionCategoryCreateInput, CollectionCategoryUncheckedCreateInput>
  }


  /**
   * CollectionCategory createMany
   */
  export type CollectionCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CollectionCategories.
     */
    data: CollectionCategoryCreateManyInput | CollectionCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CollectionCategory update
   */
  export type CollectionCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCategory
     */
    select?: CollectionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a CollectionCategory.
     */
    data: XOR<CollectionCategoryUpdateInput, CollectionCategoryUncheckedUpdateInput>
    /**
     * Choose, which CollectionCategory to update.
     */
    where: CollectionCategoryWhereUniqueInput
  }


  /**
   * CollectionCategory updateMany
   */
  export type CollectionCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CollectionCategories.
     */
    data: XOR<CollectionCategoryUpdateManyMutationInput, CollectionCategoryUncheckedUpdateManyInput>
    /**
     * Filter which CollectionCategories to update
     */
    where?: CollectionCategoryWhereInput
  }


  /**
   * CollectionCategory upsert
   */
  export type CollectionCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCategory
     */
    select?: CollectionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the CollectionCategory to update in case it exists.
     */
    where: CollectionCategoryWhereUniqueInput
    /**
     * In case the CollectionCategory found by the `where` argument doesn't exist, create a new CollectionCategory with this data.
     */
    create: XOR<CollectionCategoryCreateInput, CollectionCategoryUncheckedCreateInput>
    /**
     * In case the CollectionCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollectionCategoryUpdateInput, CollectionCategoryUncheckedUpdateInput>
  }


  /**
   * CollectionCategory delete
   */
  export type CollectionCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCategory
     */
    select?: CollectionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionCategoryInclude<ExtArgs> | null
    /**
     * Filter which CollectionCategory to delete.
     */
    where: CollectionCategoryWhereUniqueInput
  }


  /**
   * CollectionCategory deleteMany
   */
  export type CollectionCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollectionCategories to delete
     */
    where?: CollectionCategoryWhereInput
  }


  /**
   * CollectionCategory without action
   */
  export type CollectionCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCategory
     */
    select?: CollectionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionCategoryInclude<ExtArgs> | null
  }



  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    collections?: boolean | Category$collectionsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collections?: boolean | Category$collectionsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      collections: Prisma.$CollectionCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      name: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }


  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    collections<T extends Category$collectionsArgs<ExtArgs> = {}>(args?: Subset<T, Category$collectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionCategoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
    readonly name: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }


  /**
   * Category.collections
   */
  export type Category$collectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollectionCategory
     */
    select?: CollectionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CollectionCategoryInclude<ExtArgs> | null
    where?: CollectionCategoryWhereInput
    orderBy?: CollectionCategoryOrderByWithRelationInput | CollectionCategoryOrderByWithRelationInput[]
    cursor?: CollectionCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionCategoryScalarFieldEnum | CollectionCategoryScalarFieldEnum[]
  }


  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
  }



  /**
   * Model Nft
   */

  export type AggregateNft = {
    _count: NftCountAggregateOutputType | null
    _avg: NftAvgAggregateOutputType | null
    _sum: NftSumAggregateOutputType | null
    _min: NftMinAggregateOutputType | null
    _max: NftMaxAggregateOutputType | null
  }

  export type NftAvgAggregateOutputType = {
    countOfTransaction: number | null
  }

  export type NftSumAggregateOutputType = {
    countOfTransaction: number | null
  }

  export type NftMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    validate: boolean | null
    policyId: string | null
    assetName: string | null
    status: $Enums.StatusNft | null
    collectionId: string | null
    countOfTransaction: number | null
  }

  export type NftMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    validate: boolean | null
    policyId: string | null
    assetName: string | null
    status: $Enums.StatusNft | null
    collectionId: string | null
    countOfTransaction: number | null
  }

  export type NftCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    validate: number
    policyId: number
    assetName: number
    status: number
    collectionId: number
    countOfTransaction: number
    _all: number
  }


  export type NftAvgAggregateInputType = {
    countOfTransaction?: true
  }

  export type NftSumAggregateInputType = {
    countOfTransaction?: true
  }

  export type NftMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    validate?: true
    policyId?: true
    assetName?: true
    status?: true
    collectionId?: true
    countOfTransaction?: true
  }

  export type NftMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    validate?: true
    policyId?: true
    assetName?: true
    status?: true
    collectionId?: true
    countOfTransaction?: true
  }

  export type NftCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    validate?: true
    policyId?: true
    assetName?: true
    status?: true
    collectionId?: true
    countOfTransaction?: true
    _all?: true
  }

  export type NftAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nft to aggregate.
     */
    where?: NftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nfts to fetch.
     */
    orderBy?: NftOrderByWithRelationInput | NftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nfts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nfts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nfts
    **/
    _count?: true | NftCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NftAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NftSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NftMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NftMaxAggregateInputType
  }

  export type GetNftAggregateType<T extends NftAggregateArgs> = {
        [P in keyof T & keyof AggregateNft]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNft[P]>
      : GetScalarType<T[P], AggregateNft[P]>
  }




  export type NftGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NftWhereInput
    orderBy?: NftOrderByWithAggregationInput | NftOrderByWithAggregationInput[]
    by: NftScalarFieldEnum[] | NftScalarFieldEnum
    having?: NftScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NftCountAggregateInputType | true
    _avg?: NftAvgAggregateInputType
    _sum?: NftSumAggregateInputType
    _min?: NftMinAggregateInputType
    _max?: NftMaxAggregateInputType
  }

  export type NftGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    validate: boolean
    policyId: string
    assetName: string
    status: $Enums.StatusNft | null
    collectionId: string
    countOfTransaction: number | null
    _count: NftCountAggregateOutputType | null
    _avg: NftAvgAggregateOutputType | null
    _sum: NftSumAggregateOutputType | null
    _min: NftMinAggregateOutputType | null
    _max: NftMaxAggregateOutputType | null
  }

  type GetNftGroupByPayload<T extends NftGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NftGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NftGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NftGroupByOutputType[P]>
            : GetScalarType<T[P], NftGroupByOutputType[P]>
        }
      >
    >


  export type NftSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    validate?: boolean
    policyId?: boolean
    assetName?: boolean
    status?: boolean
    collectionId?: boolean
    countOfTransaction?: boolean
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
    cart?: boolean | Nft$cartArgs<ExtArgs>
    _count?: boolean | NftCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nft"]>

  export type NftSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    validate?: boolean
    policyId?: boolean
    assetName?: boolean
    status?: boolean
    collectionId?: boolean
    countOfTransaction?: boolean
  }

  export type NftInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collection?: boolean | CollectionDefaultArgs<ExtArgs>
    cart?: boolean | Nft$cartArgs<ExtArgs>
    _count?: boolean | NftCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $NftPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Nft"
    objects: {
      collection: Prisma.$CollectionPayload<ExtArgs>
      cart: Prisma.$CartNftPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      validate: boolean
      policyId: string
      assetName: string
      status: $Enums.StatusNft | null
      collectionId: string
      countOfTransaction: number | null
    }, ExtArgs["result"]["nft"]>
    composites: {}
  }


  type NftGetPayload<S extends boolean | null | undefined | NftDefaultArgs> = $Result.GetResult<Prisma.$NftPayload, S>

  type NftCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NftFindManyArgs, 'select' | 'include'> & {
      select?: NftCountAggregateInputType | true
    }

  export interface NftDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nft'], meta: { name: 'Nft' } }
    /**
     * Find zero or one Nft that matches the filter.
     * @param {NftFindUniqueArgs} args - Arguments to find a Nft
     * @example
     * // Get one Nft
     * const nft = await prisma.nft.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NftFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NftFindUniqueArgs<ExtArgs>>
    ): Prisma__NftClient<$Result.GetResult<Prisma.$NftPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Nft that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NftFindUniqueOrThrowArgs} args - Arguments to find a Nft
     * @example
     * // Get one Nft
     * const nft = await prisma.nft.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NftFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NftFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NftClient<$Result.GetResult<Prisma.$NftPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Nft that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NftFindFirstArgs} args - Arguments to find a Nft
     * @example
     * // Get one Nft
     * const nft = await prisma.nft.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NftFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NftFindFirstArgs<ExtArgs>>
    ): Prisma__NftClient<$Result.GetResult<Prisma.$NftPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Nft that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NftFindFirstOrThrowArgs} args - Arguments to find a Nft
     * @example
     * // Get one Nft
     * const nft = await prisma.nft.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NftFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NftFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NftClient<$Result.GetResult<Prisma.$NftPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Nfts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NftFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nfts
     * const nfts = await prisma.nft.findMany()
     * 
     * // Get first 10 Nfts
     * const nfts = await prisma.nft.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nftWithIdOnly = await prisma.nft.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NftFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NftFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NftPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Nft.
     * @param {NftCreateArgs} args - Arguments to create a Nft.
     * @example
     * // Create one Nft
     * const Nft = await prisma.nft.create({
     *   data: {
     *     // ... data to create a Nft
     *   }
     * })
     * 
    **/
    create<T extends NftCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NftCreateArgs<ExtArgs>>
    ): Prisma__NftClient<$Result.GetResult<Prisma.$NftPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Nfts.
     *     @param {NftCreateManyArgs} args - Arguments to create many Nfts.
     *     @example
     *     // Create many Nfts
     *     const nft = await prisma.nft.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NftCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NftCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Nft.
     * @param {NftDeleteArgs} args - Arguments to delete one Nft.
     * @example
     * // Delete one Nft
     * const Nft = await prisma.nft.delete({
     *   where: {
     *     // ... filter to delete one Nft
     *   }
     * })
     * 
    **/
    delete<T extends NftDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NftDeleteArgs<ExtArgs>>
    ): Prisma__NftClient<$Result.GetResult<Prisma.$NftPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Nft.
     * @param {NftUpdateArgs} args - Arguments to update one Nft.
     * @example
     * // Update one Nft
     * const nft = await prisma.nft.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NftUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NftUpdateArgs<ExtArgs>>
    ): Prisma__NftClient<$Result.GetResult<Prisma.$NftPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Nfts.
     * @param {NftDeleteManyArgs} args - Arguments to filter Nfts to delete.
     * @example
     * // Delete a few Nfts
     * const { count } = await prisma.nft.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NftDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NftDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nfts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NftUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nfts
     * const nft = await prisma.nft.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NftUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NftUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Nft.
     * @param {NftUpsertArgs} args - Arguments to update or create a Nft.
     * @example
     * // Update or create a Nft
     * const nft = await prisma.nft.upsert({
     *   create: {
     *     // ... data to create a Nft
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nft we want to update
     *   }
     * })
    **/
    upsert<T extends NftUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NftUpsertArgs<ExtArgs>>
    ): Prisma__NftClient<$Result.GetResult<Prisma.$NftPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Nfts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NftCountArgs} args - Arguments to filter Nfts to count.
     * @example
     * // Count the number of Nfts
     * const count = await prisma.nft.count({
     *   where: {
     *     // ... the filter for the Nfts we want to count
     *   }
     * })
    **/
    count<T extends NftCountArgs>(
      args?: Subset<T, NftCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NftCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nft.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NftAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NftAggregateArgs>(args: Subset<T, NftAggregateArgs>): Prisma.PrismaPromise<GetNftAggregateType<T>>

    /**
     * Group by Nft.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NftGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NftGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NftGroupByArgs['orderBy'] }
        : { orderBy?: NftGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NftGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNftGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Nft model
   */
  readonly fields: NftFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nft.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NftClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    collection<T extends CollectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CollectionDefaultArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    cart<T extends Nft$cartArgs<ExtArgs> = {}>(args?: Subset<T, Nft$cartArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartNftPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Nft model
   */ 
  interface NftFieldRefs {
    readonly id: FieldRef<"Nft", 'String'>
    readonly createdAt: FieldRef<"Nft", 'DateTime'>
    readonly updatedAt: FieldRef<"Nft", 'DateTime'>
    readonly validate: FieldRef<"Nft", 'Boolean'>
    readonly policyId: FieldRef<"Nft", 'String'>
    readonly assetName: FieldRef<"Nft", 'String'>
    readonly status: FieldRef<"Nft", 'StatusNft'>
    readonly collectionId: FieldRef<"Nft", 'String'>
    readonly countOfTransaction: FieldRef<"Nft", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Nft findUnique
   */
  export type NftFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nft
     */
    select?: NftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NftInclude<ExtArgs> | null
    /**
     * Filter, which Nft to fetch.
     */
    where: NftWhereUniqueInput
  }


  /**
   * Nft findUniqueOrThrow
   */
  export type NftFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nft
     */
    select?: NftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NftInclude<ExtArgs> | null
    /**
     * Filter, which Nft to fetch.
     */
    where: NftWhereUniqueInput
  }


  /**
   * Nft findFirst
   */
  export type NftFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nft
     */
    select?: NftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NftInclude<ExtArgs> | null
    /**
     * Filter, which Nft to fetch.
     */
    where?: NftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nfts to fetch.
     */
    orderBy?: NftOrderByWithRelationInput | NftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nfts.
     */
    cursor?: NftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nfts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nfts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nfts.
     */
    distinct?: NftScalarFieldEnum | NftScalarFieldEnum[]
  }


  /**
   * Nft findFirstOrThrow
   */
  export type NftFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nft
     */
    select?: NftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NftInclude<ExtArgs> | null
    /**
     * Filter, which Nft to fetch.
     */
    where?: NftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nfts to fetch.
     */
    orderBy?: NftOrderByWithRelationInput | NftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nfts.
     */
    cursor?: NftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nfts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nfts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nfts.
     */
    distinct?: NftScalarFieldEnum | NftScalarFieldEnum[]
  }


  /**
   * Nft findMany
   */
  export type NftFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nft
     */
    select?: NftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NftInclude<ExtArgs> | null
    /**
     * Filter, which Nfts to fetch.
     */
    where?: NftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nfts to fetch.
     */
    orderBy?: NftOrderByWithRelationInput | NftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nfts.
     */
    cursor?: NftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nfts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nfts.
     */
    skip?: number
    distinct?: NftScalarFieldEnum | NftScalarFieldEnum[]
  }


  /**
   * Nft create
   */
  export type NftCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nft
     */
    select?: NftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NftInclude<ExtArgs> | null
    /**
     * The data needed to create a Nft.
     */
    data: XOR<NftCreateInput, NftUncheckedCreateInput>
  }


  /**
   * Nft createMany
   */
  export type NftCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Nfts.
     */
    data: NftCreateManyInput | NftCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Nft update
   */
  export type NftUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nft
     */
    select?: NftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NftInclude<ExtArgs> | null
    /**
     * The data needed to update a Nft.
     */
    data: XOR<NftUpdateInput, NftUncheckedUpdateInput>
    /**
     * Choose, which Nft to update.
     */
    where: NftWhereUniqueInput
  }


  /**
   * Nft updateMany
   */
  export type NftUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Nfts.
     */
    data: XOR<NftUpdateManyMutationInput, NftUncheckedUpdateManyInput>
    /**
     * Filter which Nfts to update
     */
    where?: NftWhereInput
  }


  /**
   * Nft upsert
   */
  export type NftUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nft
     */
    select?: NftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NftInclude<ExtArgs> | null
    /**
     * The filter to search for the Nft to update in case it exists.
     */
    where: NftWhereUniqueInput
    /**
     * In case the Nft found by the `where` argument doesn't exist, create a new Nft with this data.
     */
    create: XOR<NftCreateInput, NftUncheckedCreateInput>
    /**
     * In case the Nft was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NftUpdateInput, NftUncheckedUpdateInput>
  }


  /**
   * Nft delete
   */
  export type NftDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nft
     */
    select?: NftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NftInclude<ExtArgs> | null
    /**
     * Filter which Nft to delete.
     */
    where: NftWhereUniqueInput
  }


  /**
   * Nft deleteMany
   */
  export type NftDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nfts to delete
     */
    where?: NftWhereInput
  }


  /**
   * Nft.cart
   */
  export type Nft$cartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartNft
     */
    select?: CartNftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartNftInclude<ExtArgs> | null
    where?: CartNftWhereInput
    orderBy?: CartNftOrderByWithRelationInput | CartNftOrderByWithRelationInput[]
    cursor?: CartNftWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartNftScalarFieldEnum | CartNftScalarFieldEnum[]
  }


  /**
   * Nft without action
   */
  export type NftDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nft
     */
    select?: NftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NftInclude<ExtArgs> | null
  }



  /**
   * Model CartNft
   */

  export type AggregateCartNft = {
    _count: CartNftCountAggregateOutputType | null
    _min: CartNftMinAggregateOutputType | null
    _max: CartNftMaxAggregateOutputType | null
  }

  export type CartNftMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    cartId: string | null
    nftId: string | null
  }

  export type CartNftMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    cartId: string | null
    nftId: string | null
  }

  export type CartNftCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    cartId: number
    nftId: number
    _all: number
  }


  export type CartNftMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    cartId?: true
    nftId?: true
  }

  export type CartNftMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    cartId?: true
    nftId?: true
  }

  export type CartNftCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    cartId?: true
    nftId?: true
    _all?: true
  }

  export type CartNftAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartNft to aggregate.
     */
    where?: CartNftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartNfts to fetch.
     */
    orderBy?: CartNftOrderByWithRelationInput | CartNftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartNftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartNfts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartNfts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CartNfts
    **/
    _count?: true | CartNftCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartNftMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartNftMaxAggregateInputType
  }

  export type GetCartNftAggregateType<T extends CartNftAggregateArgs> = {
        [P in keyof T & keyof AggregateCartNft]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartNft[P]>
      : GetScalarType<T[P], AggregateCartNft[P]>
  }




  export type CartNftGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartNftWhereInput
    orderBy?: CartNftOrderByWithAggregationInput | CartNftOrderByWithAggregationInput[]
    by: CartNftScalarFieldEnum[] | CartNftScalarFieldEnum
    having?: CartNftScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartNftCountAggregateInputType | true
    _min?: CartNftMinAggregateInputType
    _max?: CartNftMaxAggregateInputType
  }

  export type CartNftGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    cartId: string
    nftId: string
    _count: CartNftCountAggregateOutputType | null
    _min: CartNftMinAggregateOutputType | null
    _max: CartNftMaxAggregateOutputType | null
  }

  type GetCartNftGroupByPayload<T extends CartNftGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartNftGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartNftGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartNftGroupByOutputType[P]>
            : GetScalarType<T[P], CartNftGroupByOutputType[P]>
        }
      >
    >


  export type CartNftSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updatedAt?: boolean
    cartId?: boolean
    nftId?: boolean
    cart?: boolean | CartDefaultArgs<ExtArgs>
    nft?: boolean | NftDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartNft"]>

  export type CartNftSelectScalar = {
    createdAt?: boolean
    updatedAt?: boolean
    cartId?: boolean
    nftId?: boolean
  }

  export type CartNftInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart?: boolean | CartDefaultArgs<ExtArgs>
    nft?: boolean | NftDefaultArgs<ExtArgs>
  }


  export type $CartNftPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CartNft"
    objects: {
      cart: Prisma.$CartPayload<ExtArgs>
      nft: Prisma.$NftPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      updatedAt: Date
      cartId: string
      nftId: string
    }, ExtArgs["result"]["cartNft"]>
    composites: {}
  }


  type CartNftGetPayload<S extends boolean | null | undefined | CartNftDefaultArgs> = $Result.GetResult<Prisma.$CartNftPayload, S>

  type CartNftCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CartNftFindManyArgs, 'select' | 'include'> & {
      select?: CartNftCountAggregateInputType | true
    }

  export interface CartNftDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CartNft'], meta: { name: 'CartNft' } }
    /**
     * Find zero or one CartNft that matches the filter.
     * @param {CartNftFindUniqueArgs} args - Arguments to find a CartNft
     * @example
     * // Get one CartNft
     * const cartNft = await prisma.cartNft.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CartNftFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CartNftFindUniqueArgs<ExtArgs>>
    ): Prisma__CartNftClient<$Result.GetResult<Prisma.$CartNftPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CartNft that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CartNftFindUniqueOrThrowArgs} args - Arguments to find a CartNft
     * @example
     * // Get one CartNft
     * const cartNft = await prisma.cartNft.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CartNftFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CartNftFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CartNftClient<$Result.GetResult<Prisma.$CartNftPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CartNft that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartNftFindFirstArgs} args - Arguments to find a CartNft
     * @example
     * // Get one CartNft
     * const cartNft = await prisma.cartNft.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CartNftFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CartNftFindFirstArgs<ExtArgs>>
    ): Prisma__CartNftClient<$Result.GetResult<Prisma.$CartNftPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CartNft that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartNftFindFirstOrThrowArgs} args - Arguments to find a CartNft
     * @example
     * // Get one CartNft
     * const cartNft = await prisma.cartNft.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CartNftFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CartNftFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CartNftClient<$Result.GetResult<Prisma.$CartNftPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CartNfts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartNftFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CartNfts
     * const cartNfts = await prisma.cartNft.findMany()
     * 
     * // Get first 10 CartNfts
     * const cartNfts = await prisma.cartNft.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const cartNftWithCreatedAtOnly = await prisma.cartNft.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends CartNftFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CartNftFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartNftPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CartNft.
     * @param {CartNftCreateArgs} args - Arguments to create a CartNft.
     * @example
     * // Create one CartNft
     * const CartNft = await prisma.cartNft.create({
     *   data: {
     *     // ... data to create a CartNft
     *   }
     * })
     * 
    **/
    create<T extends CartNftCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CartNftCreateArgs<ExtArgs>>
    ): Prisma__CartNftClient<$Result.GetResult<Prisma.$CartNftPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CartNfts.
     *     @param {CartNftCreateManyArgs} args - Arguments to create many CartNfts.
     *     @example
     *     // Create many CartNfts
     *     const cartNft = await prisma.cartNft.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CartNftCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CartNftCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CartNft.
     * @param {CartNftDeleteArgs} args - Arguments to delete one CartNft.
     * @example
     * // Delete one CartNft
     * const CartNft = await prisma.cartNft.delete({
     *   where: {
     *     // ... filter to delete one CartNft
     *   }
     * })
     * 
    **/
    delete<T extends CartNftDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CartNftDeleteArgs<ExtArgs>>
    ): Prisma__CartNftClient<$Result.GetResult<Prisma.$CartNftPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CartNft.
     * @param {CartNftUpdateArgs} args - Arguments to update one CartNft.
     * @example
     * // Update one CartNft
     * const cartNft = await prisma.cartNft.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CartNftUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CartNftUpdateArgs<ExtArgs>>
    ): Prisma__CartNftClient<$Result.GetResult<Prisma.$CartNftPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CartNfts.
     * @param {CartNftDeleteManyArgs} args - Arguments to filter CartNfts to delete.
     * @example
     * // Delete a few CartNfts
     * const { count } = await prisma.cartNft.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CartNftDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CartNftDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartNfts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartNftUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CartNfts
     * const cartNft = await prisma.cartNft.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CartNftUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CartNftUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CartNft.
     * @param {CartNftUpsertArgs} args - Arguments to update or create a CartNft.
     * @example
     * // Update or create a CartNft
     * const cartNft = await prisma.cartNft.upsert({
     *   create: {
     *     // ... data to create a CartNft
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CartNft we want to update
     *   }
     * })
    **/
    upsert<T extends CartNftUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CartNftUpsertArgs<ExtArgs>>
    ): Prisma__CartNftClient<$Result.GetResult<Prisma.$CartNftPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CartNfts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartNftCountArgs} args - Arguments to filter CartNfts to count.
     * @example
     * // Count the number of CartNfts
     * const count = await prisma.cartNft.count({
     *   where: {
     *     // ... the filter for the CartNfts we want to count
     *   }
     * })
    **/
    count<T extends CartNftCountArgs>(
      args?: Subset<T, CartNftCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartNftCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CartNft.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartNftAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartNftAggregateArgs>(args: Subset<T, CartNftAggregateArgs>): Prisma.PrismaPromise<GetCartNftAggregateType<T>>

    /**
     * Group by CartNft.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartNftGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartNftGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartNftGroupByArgs['orderBy'] }
        : { orderBy?: CartNftGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartNftGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartNftGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CartNft model
   */
  readonly fields: CartNftFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CartNft.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartNftClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cart<T extends CartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CartDefaultArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    nft<T extends NftDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NftDefaultArgs<ExtArgs>>): Prisma__NftClient<$Result.GetResult<Prisma.$NftPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CartNft model
   */ 
  interface CartNftFieldRefs {
    readonly createdAt: FieldRef<"CartNft", 'DateTime'>
    readonly updatedAt: FieldRef<"CartNft", 'DateTime'>
    readonly cartId: FieldRef<"CartNft", 'String'>
    readonly nftId: FieldRef<"CartNft", 'String'>
  }
    

  // Custom InputTypes

  /**
   * CartNft findUnique
   */
  export type CartNftFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartNft
     */
    select?: CartNftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartNftInclude<ExtArgs> | null
    /**
     * Filter, which CartNft to fetch.
     */
    where: CartNftWhereUniqueInput
  }


  /**
   * CartNft findUniqueOrThrow
   */
  export type CartNftFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartNft
     */
    select?: CartNftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartNftInclude<ExtArgs> | null
    /**
     * Filter, which CartNft to fetch.
     */
    where: CartNftWhereUniqueInput
  }


  /**
   * CartNft findFirst
   */
  export type CartNftFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartNft
     */
    select?: CartNftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartNftInclude<ExtArgs> | null
    /**
     * Filter, which CartNft to fetch.
     */
    where?: CartNftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartNfts to fetch.
     */
    orderBy?: CartNftOrderByWithRelationInput | CartNftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartNfts.
     */
    cursor?: CartNftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartNfts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartNfts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartNfts.
     */
    distinct?: CartNftScalarFieldEnum | CartNftScalarFieldEnum[]
  }


  /**
   * CartNft findFirstOrThrow
   */
  export type CartNftFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartNft
     */
    select?: CartNftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartNftInclude<ExtArgs> | null
    /**
     * Filter, which CartNft to fetch.
     */
    where?: CartNftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartNfts to fetch.
     */
    orderBy?: CartNftOrderByWithRelationInput | CartNftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartNfts.
     */
    cursor?: CartNftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartNfts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartNfts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartNfts.
     */
    distinct?: CartNftScalarFieldEnum | CartNftScalarFieldEnum[]
  }


  /**
   * CartNft findMany
   */
  export type CartNftFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartNft
     */
    select?: CartNftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartNftInclude<ExtArgs> | null
    /**
     * Filter, which CartNfts to fetch.
     */
    where?: CartNftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartNfts to fetch.
     */
    orderBy?: CartNftOrderByWithRelationInput | CartNftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CartNfts.
     */
    cursor?: CartNftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartNfts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartNfts.
     */
    skip?: number
    distinct?: CartNftScalarFieldEnum | CartNftScalarFieldEnum[]
  }


  /**
   * CartNft create
   */
  export type CartNftCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartNft
     */
    select?: CartNftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartNftInclude<ExtArgs> | null
    /**
     * The data needed to create a CartNft.
     */
    data: XOR<CartNftCreateInput, CartNftUncheckedCreateInput>
  }


  /**
   * CartNft createMany
   */
  export type CartNftCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CartNfts.
     */
    data: CartNftCreateManyInput | CartNftCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CartNft update
   */
  export type CartNftUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartNft
     */
    select?: CartNftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartNftInclude<ExtArgs> | null
    /**
     * The data needed to update a CartNft.
     */
    data: XOR<CartNftUpdateInput, CartNftUncheckedUpdateInput>
    /**
     * Choose, which CartNft to update.
     */
    where: CartNftWhereUniqueInput
  }


  /**
   * CartNft updateMany
   */
  export type CartNftUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CartNfts.
     */
    data: XOR<CartNftUpdateManyMutationInput, CartNftUncheckedUpdateManyInput>
    /**
     * Filter which CartNfts to update
     */
    where?: CartNftWhereInput
  }


  /**
   * CartNft upsert
   */
  export type CartNftUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartNft
     */
    select?: CartNftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartNftInclude<ExtArgs> | null
    /**
     * The filter to search for the CartNft to update in case it exists.
     */
    where: CartNftWhereUniqueInput
    /**
     * In case the CartNft found by the `where` argument doesn't exist, create a new CartNft with this data.
     */
    create: XOR<CartNftCreateInput, CartNftUncheckedCreateInput>
    /**
     * In case the CartNft was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartNftUpdateInput, CartNftUncheckedUpdateInput>
  }


  /**
   * CartNft delete
   */
  export type CartNftDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartNft
     */
    select?: CartNftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartNftInclude<ExtArgs> | null
    /**
     * Filter which CartNft to delete.
     */
    where: CartNftWhereUniqueInput
  }


  /**
   * CartNft deleteMany
   */
  export type CartNftDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartNfts to delete
     */
    where?: CartNftWhereInput
  }


  /**
   * CartNft without action
   */
  export type CartNftDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartNft
     */
    select?: CartNftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartNftInclude<ExtArgs> | null
  }



  /**
   * Model Cart
   */

  export type AggregateCart = {
    _count: CartCountAggregateOutputType | null
    _min: CartMinAggregateOutputType | null
    _max: CartMaxAggregateOutputType | null
  }

  export type CartMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    accountId: string | null
  }

  export type CartMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    accountId: string | null
  }

  export type CartCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    accountId: number
    _all: number
  }


  export type CartMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    accountId?: true
  }

  export type CartMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    accountId?: true
  }

  export type CartCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    accountId?: true
    _all?: true
  }

  export type CartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cart to aggregate.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carts
    **/
    _count?: true | CartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartMaxAggregateInputType
  }

  export type GetCartAggregateType<T extends CartAggregateArgs> = {
        [P in keyof T & keyof AggregateCart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCart[P]>
      : GetScalarType<T[P], AggregateCart[P]>
  }




  export type CartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartWhereInput
    orderBy?: CartOrderByWithAggregationInput | CartOrderByWithAggregationInput[]
    by: CartScalarFieldEnum[] | CartScalarFieldEnum
    having?: CartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartCountAggregateInputType | true
    _min?: CartMinAggregateInputType
    _max?: CartMaxAggregateInputType
  }

  export type CartGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    accountId: string
    _count: CartCountAggregateOutputType | null
    _min: CartMinAggregateOutputType | null
    _max: CartMaxAggregateOutputType | null
  }

  type GetCartGroupByPayload<T extends CartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartGroupByOutputType[P]>
            : GetScalarType<T[P], CartGroupByOutputType[P]>
        }
      >
    >


  export type CartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accountId?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    nfts?: boolean | Cart$nftsArgs<ExtArgs>
    _count?: boolean | CartCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cart"]>

  export type CartSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accountId?: boolean
  }

  export type CartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    nfts?: boolean | Cart$nftsArgs<ExtArgs>
    _count?: boolean | CartCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cart"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      nfts: Prisma.$CartNftPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      accountId: string
    }, ExtArgs["result"]["cart"]>
    composites: {}
  }


  type CartGetPayload<S extends boolean | null | undefined | CartDefaultArgs> = $Result.GetResult<Prisma.$CartPayload, S>

  type CartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CartFindManyArgs, 'select' | 'include'> & {
      select?: CartCountAggregateInputType | true
    }

  export interface CartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cart'], meta: { name: 'Cart' } }
    /**
     * Find zero or one Cart that matches the filter.
     * @param {CartFindUniqueArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CartFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CartFindUniqueArgs<ExtArgs>>
    ): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cart that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CartFindUniqueOrThrowArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CartFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CartFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindFirstArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CartFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CartFindFirstArgs<ExtArgs>>
    ): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindFirstOrThrowArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CartFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CartFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Carts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carts
     * const carts = await prisma.cart.findMany()
     * 
     * // Get first 10 Carts
     * const carts = await prisma.cart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartWithIdOnly = await prisma.cart.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CartFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CartFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cart.
     * @param {CartCreateArgs} args - Arguments to create a Cart.
     * @example
     * // Create one Cart
     * const Cart = await prisma.cart.create({
     *   data: {
     *     // ... data to create a Cart
     *   }
     * })
     * 
    **/
    create<T extends CartCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CartCreateArgs<ExtArgs>>
    ): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Carts.
     *     @param {CartCreateManyArgs} args - Arguments to create many Carts.
     *     @example
     *     // Create many Carts
     *     const cart = await prisma.cart.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CartCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CartCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cart.
     * @param {CartDeleteArgs} args - Arguments to delete one Cart.
     * @example
     * // Delete one Cart
     * const Cart = await prisma.cart.delete({
     *   where: {
     *     // ... filter to delete one Cart
     *   }
     * })
     * 
    **/
    delete<T extends CartDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CartDeleteArgs<ExtArgs>>
    ): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cart.
     * @param {CartUpdateArgs} args - Arguments to update one Cart.
     * @example
     * // Update one Cart
     * const cart = await prisma.cart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CartUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CartUpdateArgs<ExtArgs>>
    ): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Carts.
     * @param {CartDeleteManyArgs} args - Arguments to filter Carts to delete.
     * @example
     * // Delete a few Carts
     * const { count } = await prisma.cart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CartDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CartDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carts
     * const cart = await prisma.cart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CartUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CartUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cart.
     * @param {CartUpsertArgs} args - Arguments to update or create a Cart.
     * @example
     * // Update or create a Cart
     * const cart = await prisma.cart.upsert({
     *   create: {
     *     // ... data to create a Cart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cart we want to update
     *   }
     * })
    **/
    upsert<T extends CartUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CartUpsertArgs<ExtArgs>>
    ): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartCountArgs} args - Arguments to filter Carts to count.
     * @example
     * // Count the number of Carts
     * const count = await prisma.cart.count({
     *   where: {
     *     // ... the filter for the Carts we want to count
     *   }
     * })
    **/
    count<T extends CartCountArgs>(
      args?: Subset<T, CartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartAggregateArgs>(args: Subset<T, CartAggregateArgs>): Prisma.PrismaPromise<GetCartAggregateType<T>>

    /**
     * Group by Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartGroupByArgs['orderBy'] }
        : { orderBy?: CartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cart model
   */
  readonly fields: CartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    nfts<T extends Cart$nftsArgs<ExtArgs> = {}>(args?: Subset<T, Cart$nftsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartNftPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Cart model
   */ 
  interface CartFieldRefs {
    readonly id: FieldRef<"Cart", 'String'>
    readonly createdAt: FieldRef<"Cart", 'DateTime'>
    readonly updatedAt: FieldRef<"Cart", 'DateTime'>
    readonly accountId: FieldRef<"Cart", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Cart findUnique
   */
  export type CartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where: CartWhereUniqueInput
  }


  /**
   * Cart findUniqueOrThrow
   */
  export type CartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where: CartWhereUniqueInput
  }


  /**
   * Cart findFirst
   */
  export type CartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carts.
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carts.
     */
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }


  /**
   * Cart findFirstOrThrow
   */
  export type CartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carts.
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carts.
     */
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }


  /**
   * Cart findMany
   */
  export type CartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Carts to fetch.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carts.
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }


  /**
   * Cart create
   */
  export type CartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * The data needed to create a Cart.
     */
    data: XOR<CartCreateInput, CartUncheckedCreateInput>
  }


  /**
   * Cart createMany
   */
  export type CartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Carts.
     */
    data: CartCreateManyInput | CartCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Cart update
   */
  export type CartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * The data needed to update a Cart.
     */
    data: XOR<CartUpdateInput, CartUncheckedUpdateInput>
    /**
     * Choose, which Cart to update.
     */
    where: CartWhereUniqueInput
  }


  /**
   * Cart updateMany
   */
  export type CartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Carts.
     */
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyInput>
    /**
     * Filter which Carts to update
     */
    where?: CartWhereInput
  }


  /**
   * Cart upsert
   */
  export type CartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * The filter to search for the Cart to update in case it exists.
     */
    where: CartWhereUniqueInput
    /**
     * In case the Cart found by the `where` argument doesn't exist, create a new Cart with this data.
     */
    create: XOR<CartCreateInput, CartUncheckedCreateInput>
    /**
     * In case the Cart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartUpdateInput, CartUncheckedUpdateInput>
  }


  /**
   * Cart delete
   */
  export type CartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter which Cart to delete.
     */
    where: CartWhereUniqueInput
  }


  /**
   * Cart deleteMany
   */
  export type CartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carts to delete
     */
    where?: CartWhereInput
  }


  /**
   * Cart.nfts
   */
  export type Cart$nftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartNft
     */
    select?: CartNftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartNftInclude<ExtArgs> | null
    where?: CartNftWhereInput
    orderBy?: CartNftOrderByWithRelationInput | CartNftOrderByWithRelationInput[]
    cursor?: CartNftWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartNftScalarFieldEnum | CartNftScalarFieldEnum[]
  }


  /**
   * Cart without action
   */
  export type CartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CartInclude<ExtArgs> | null
  }



  /**
   * Model Guide
   */

  export type AggregateGuide = {
    _count: GuideCountAggregateOutputType | null
    _min: GuideMinAggregateOutputType | null
    _max: GuideMaxAggregateOutputType | null
  }

  export type GuideMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    question: string | null
    title: string | null
    description: string | null
    url: string | null
  }

  export type GuideMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    question: string | null
    title: string | null
    description: string | null
    url: string | null
  }

  export type GuideCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    question: number
    title: number
    description: number
    url: number
    _all: number
  }


  export type GuideMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    question?: true
    title?: true
    description?: true
    url?: true
  }

  export type GuideMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    question?: true
    title?: true
    description?: true
    url?: true
  }

  export type GuideCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    question?: true
    title?: true
    description?: true
    url?: true
    _all?: true
  }

  export type GuideAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guide to aggregate.
     */
    where?: GuideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guides to fetch.
     */
    orderBy?: GuideOrderByWithRelationInput | GuideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GuideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Guides
    **/
    _count?: true | GuideCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuideMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuideMaxAggregateInputType
  }

  export type GetGuideAggregateType<T extends GuideAggregateArgs> = {
        [P in keyof T & keyof AggregateGuide]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuide[P]>
      : GetScalarType<T[P], AggregateGuide[P]>
  }




  export type GuideGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuideWhereInput
    orderBy?: GuideOrderByWithAggregationInput | GuideOrderByWithAggregationInput[]
    by: GuideScalarFieldEnum[] | GuideScalarFieldEnum
    having?: GuideScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuideCountAggregateInputType | true
    _min?: GuideMinAggregateInputType
    _max?: GuideMaxAggregateInputType
  }

  export type GuideGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    question: string
    title: string
    description: string
    url: string
    _count: GuideCountAggregateOutputType | null
    _min: GuideMinAggregateOutputType | null
    _max: GuideMaxAggregateOutputType | null
  }

  type GetGuideGroupByPayload<T extends GuideGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuideGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuideGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuideGroupByOutputType[P]>
            : GetScalarType<T[P], GuideGroupByOutputType[P]>
        }
      >
    >


  export type GuideSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    question?: boolean
    title?: boolean
    description?: boolean
    url?: boolean
  }, ExtArgs["result"]["guide"]>

  export type GuideSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    question?: boolean
    title?: boolean
    description?: boolean
    url?: boolean
  }


  export type $GuidePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Guide"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      question: string
      title: string
      description: string
      url: string
    }, ExtArgs["result"]["guide"]>
    composites: {}
  }


  type GuideGetPayload<S extends boolean | null | undefined | GuideDefaultArgs> = $Result.GetResult<Prisma.$GuidePayload, S>

  type GuideCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GuideFindManyArgs, 'select' | 'include'> & {
      select?: GuideCountAggregateInputType | true
    }

  export interface GuideDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Guide'], meta: { name: 'Guide' } }
    /**
     * Find zero or one Guide that matches the filter.
     * @param {GuideFindUniqueArgs} args - Arguments to find a Guide
     * @example
     * // Get one Guide
     * const guide = await prisma.guide.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GuideFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GuideFindUniqueArgs<ExtArgs>>
    ): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Guide that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GuideFindUniqueOrThrowArgs} args - Arguments to find a Guide
     * @example
     * // Get one Guide
     * const guide = await prisma.guide.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GuideFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GuideFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Guide that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideFindFirstArgs} args - Arguments to find a Guide
     * @example
     * // Get one Guide
     * const guide = await prisma.guide.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GuideFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GuideFindFirstArgs<ExtArgs>>
    ): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Guide that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideFindFirstOrThrowArgs} args - Arguments to find a Guide
     * @example
     * // Get one Guide
     * const guide = await prisma.guide.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GuideFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GuideFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Guides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guides
     * const guides = await prisma.guide.findMany()
     * 
     * // Get first 10 Guides
     * const guides = await prisma.guide.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guideWithIdOnly = await prisma.guide.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GuideFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GuideFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Guide.
     * @param {GuideCreateArgs} args - Arguments to create a Guide.
     * @example
     * // Create one Guide
     * const Guide = await prisma.guide.create({
     *   data: {
     *     // ... data to create a Guide
     *   }
     * })
     * 
    **/
    create<T extends GuideCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GuideCreateArgs<ExtArgs>>
    ): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Guides.
     *     @param {GuideCreateManyArgs} args - Arguments to create many Guides.
     *     @example
     *     // Create many Guides
     *     const guide = await prisma.guide.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GuideCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GuideCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Guide.
     * @param {GuideDeleteArgs} args - Arguments to delete one Guide.
     * @example
     * // Delete one Guide
     * const Guide = await prisma.guide.delete({
     *   where: {
     *     // ... filter to delete one Guide
     *   }
     * })
     * 
    **/
    delete<T extends GuideDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GuideDeleteArgs<ExtArgs>>
    ): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Guide.
     * @param {GuideUpdateArgs} args - Arguments to update one Guide.
     * @example
     * // Update one Guide
     * const guide = await prisma.guide.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GuideUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GuideUpdateArgs<ExtArgs>>
    ): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Guides.
     * @param {GuideDeleteManyArgs} args - Arguments to filter Guides to delete.
     * @example
     * // Delete a few Guides
     * const { count } = await prisma.guide.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GuideDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GuideDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guides
     * const guide = await prisma.guide.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GuideUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GuideUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Guide.
     * @param {GuideUpsertArgs} args - Arguments to update or create a Guide.
     * @example
     * // Update or create a Guide
     * const guide = await prisma.guide.upsert({
     *   create: {
     *     // ... data to create a Guide
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guide we want to update
     *   }
     * })
    **/
    upsert<T extends GuideUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GuideUpsertArgs<ExtArgs>>
    ): Prisma__GuideClient<$Result.GetResult<Prisma.$GuidePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Guides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideCountArgs} args - Arguments to filter Guides to count.
     * @example
     * // Count the number of Guides
     * const count = await prisma.guide.count({
     *   where: {
     *     // ... the filter for the Guides we want to count
     *   }
     * })
    **/
    count<T extends GuideCountArgs>(
      args?: Subset<T, GuideCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuideCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guide.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuideAggregateArgs>(args: Subset<T, GuideAggregateArgs>): Prisma.PrismaPromise<GetGuideAggregateType<T>>

    /**
     * Group by Guide.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuideGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuideGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuideGroupByArgs['orderBy'] }
        : { orderBy?: GuideGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuideGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuideGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Guide model
   */
  readonly fields: GuideFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Guide.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GuideClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Guide model
   */ 
  interface GuideFieldRefs {
    readonly id: FieldRef<"Guide", 'String'>
    readonly createdAt: FieldRef<"Guide", 'DateTime'>
    readonly updatedAt: FieldRef<"Guide", 'DateTime'>
    readonly question: FieldRef<"Guide", 'String'>
    readonly title: FieldRef<"Guide", 'String'>
    readonly description: FieldRef<"Guide", 'String'>
    readonly url: FieldRef<"Guide", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Guide findUnique
   */
  export type GuideFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Filter, which Guide to fetch.
     */
    where: GuideWhereUniqueInput
  }


  /**
   * Guide findUniqueOrThrow
   */
  export type GuideFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Filter, which Guide to fetch.
     */
    where: GuideWhereUniqueInput
  }


  /**
   * Guide findFirst
   */
  export type GuideFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Filter, which Guide to fetch.
     */
    where?: GuideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guides to fetch.
     */
    orderBy?: GuideOrderByWithRelationInput | GuideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guides.
     */
    cursor?: GuideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guides.
     */
    distinct?: GuideScalarFieldEnum | GuideScalarFieldEnum[]
  }


  /**
   * Guide findFirstOrThrow
   */
  export type GuideFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Filter, which Guide to fetch.
     */
    where?: GuideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guides to fetch.
     */
    orderBy?: GuideOrderByWithRelationInput | GuideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guides.
     */
    cursor?: GuideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guides.
     */
    distinct?: GuideScalarFieldEnum | GuideScalarFieldEnum[]
  }


  /**
   * Guide findMany
   */
  export type GuideFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Filter, which Guides to fetch.
     */
    where?: GuideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guides to fetch.
     */
    orderBy?: GuideOrderByWithRelationInput | GuideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Guides.
     */
    cursor?: GuideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guides.
     */
    skip?: number
    distinct?: GuideScalarFieldEnum | GuideScalarFieldEnum[]
  }


  /**
   * Guide create
   */
  export type GuideCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * The data needed to create a Guide.
     */
    data: XOR<GuideCreateInput, GuideUncheckedCreateInput>
  }


  /**
   * Guide createMany
   */
  export type GuideCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Guides.
     */
    data: GuideCreateManyInput | GuideCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Guide update
   */
  export type GuideUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * The data needed to update a Guide.
     */
    data: XOR<GuideUpdateInput, GuideUncheckedUpdateInput>
    /**
     * Choose, which Guide to update.
     */
    where: GuideWhereUniqueInput
  }


  /**
   * Guide updateMany
   */
  export type GuideUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Guides.
     */
    data: XOR<GuideUpdateManyMutationInput, GuideUncheckedUpdateManyInput>
    /**
     * Filter which Guides to update
     */
    where?: GuideWhereInput
  }


  /**
   * Guide upsert
   */
  export type GuideUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * The filter to search for the Guide to update in case it exists.
     */
    where: GuideWhereUniqueInput
    /**
     * In case the Guide found by the `where` argument doesn't exist, create a new Guide with this data.
     */
    create: XOR<GuideCreateInput, GuideUncheckedCreateInput>
    /**
     * In case the Guide was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GuideUpdateInput, GuideUncheckedUpdateInput>
  }


  /**
   * Guide delete
   */
  export type GuideDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
    /**
     * Filter which Guide to delete.
     */
    where: GuideWhereUniqueInput
  }


  /**
   * Guide deleteMany
   */
  export type GuideDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guides to delete
     */
    where?: GuideWhereInput
  }


  /**
   * Guide without action
   */
  export type GuideDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guide
     */
    select?: GuideSelect<ExtArgs> | null
  }



  /**
   * Model Blog
   */

  export type AggregateBlog = {
    _count: BlogCountAggregateOutputType | null
    _min: BlogMinAggregateOutputType | null
    _max: BlogMaxAggregateOutputType | null
  }

  export type BlogMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BlogMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BlogCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BlogMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BlogMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BlogCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BlogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Blog to aggregate.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Blogs
    **/
    _count?: true | BlogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlogMaxAggregateInputType
  }

  export type GetBlogAggregateType<T extends BlogAggregateArgs> = {
        [P in keyof T & keyof AggregateBlog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlog[P]>
      : GetScalarType<T[P], AggregateBlog[P]>
  }




  export type BlogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlogWhereInput
    orderBy?: BlogOrderByWithAggregationInput | BlogOrderByWithAggregationInput[]
    by: BlogScalarFieldEnum[] | BlogScalarFieldEnum
    having?: BlogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlogCountAggregateInputType | true
    _min?: BlogMinAggregateInputType
    _max?: BlogMaxAggregateInputType
  }

  export type BlogGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    _count: BlogCountAggregateOutputType | null
    _min: BlogMinAggregateOutputType | null
    _max: BlogMaxAggregateOutputType | null
  }

  type GetBlogGroupByPayload<T extends BlogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlogGroupByOutputType[P]>
            : GetScalarType<T[P], BlogGroupByOutputType[P]>
        }
      >
    >


  export type BlogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["blog"]>

  export type BlogSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $BlogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Blog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["blog"]>
    composites: {}
  }


  type BlogGetPayload<S extends boolean | null | undefined | BlogDefaultArgs> = $Result.GetResult<Prisma.$BlogPayload, S>

  type BlogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BlogFindManyArgs, 'select' | 'include'> & {
      select?: BlogCountAggregateInputType | true
    }

  export interface BlogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Blog'], meta: { name: 'Blog' } }
    /**
     * Find zero or one Blog that matches the filter.
     * @param {BlogFindUniqueArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlogFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BlogFindUniqueArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Blog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlogFindUniqueOrThrowArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Blog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindFirstArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlogFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogFindFirstArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Blog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindFirstOrThrowArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Blogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Blogs
     * const blogs = await prisma.blog.findMany()
     * 
     * // Get first 10 Blogs
     * const blogs = await prisma.blog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blogWithIdOnly = await prisma.blog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BlogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Blog.
     * @param {BlogCreateArgs} args - Arguments to create a Blog.
     * @example
     * // Create one Blog
     * const Blog = await prisma.blog.create({
     *   data: {
     *     // ... data to create a Blog
     *   }
     * })
     * 
    **/
    create<T extends BlogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BlogCreateArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Blogs.
     *     @param {BlogCreateManyArgs} args - Arguments to create many Blogs.
     *     @example
     *     // Create many Blogs
     *     const blog = await prisma.blog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlogCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Blog.
     * @param {BlogDeleteArgs} args - Arguments to delete one Blog.
     * @example
     * // Delete one Blog
     * const Blog = await prisma.blog.delete({
     *   where: {
     *     // ... filter to delete one Blog
     *   }
     * })
     * 
    **/
    delete<T extends BlogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BlogDeleteArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Blog.
     * @param {BlogUpdateArgs} args - Arguments to update one Blog.
     * @example
     * // Update one Blog
     * const blog = await prisma.blog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUpdateArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Blogs.
     * @param {BlogDeleteManyArgs} args - Arguments to filter Blogs to delete.
     * @example
     * // Delete a few Blogs
     * const { count } = await prisma.blog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Blogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Blogs
     * const blog = await prisma.blog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Blog.
     * @param {BlogUpsertArgs} args - Arguments to update or create a Blog.
     * @example
     * // Update or create a Blog
     * const blog = await prisma.blog.upsert({
     *   create: {
     *     // ... data to create a Blog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Blog we want to update
     *   }
     * })
    **/
    upsert<T extends BlogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUpsertArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Blogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogCountArgs} args - Arguments to filter Blogs to count.
     * @example
     * // Count the number of Blogs
     * const count = await prisma.blog.count({
     *   where: {
     *     // ... the filter for the Blogs we want to count
     *   }
     * })
    **/
    count<T extends BlogCountArgs>(
      args?: Subset<T, BlogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Blog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlogAggregateArgs>(args: Subset<T, BlogAggregateArgs>): Prisma.PrismaPromise<GetBlogAggregateType<T>>

    /**
     * Group by Blog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlogGroupByArgs['orderBy'] }
        : { orderBy?: BlogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Blog model
   */
  readonly fields: BlogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Blog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Blog model
   */ 
  interface BlogFieldRefs {
    readonly id: FieldRef<"Blog", 'String'>
    readonly createdAt: FieldRef<"Blog", 'DateTime'>
    readonly updatedAt: FieldRef<"Blog", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Blog findUnique
   */
  export type BlogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog findUniqueOrThrow
   */
  export type BlogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog findFirst
   */
  export type BlogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blogs.
     */
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }


  /**
   * Blog findFirstOrThrow
   */
  export type BlogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blogs.
     */
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }


  /**
   * Blog findMany
   */
  export type BlogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Filter, which Blogs to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }


  /**
   * Blog create
   */
  export type BlogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * The data needed to create a Blog.
     */
    data: XOR<BlogCreateInput, BlogUncheckedCreateInput>
  }


  /**
   * Blog createMany
   */
  export type BlogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Blogs.
     */
    data: BlogCreateManyInput | BlogCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Blog update
   */
  export type BlogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * The data needed to update a Blog.
     */
    data: XOR<BlogUpdateInput, BlogUncheckedUpdateInput>
    /**
     * Choose, which Blog to update.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog updateMany
   */
  export type BlogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Blogs.
     */
    data: XOR<BlogUpdateManyMutationInput, BlogUncheckedUpdateManyInput>
    /**
     * Filter which Blogs to update
     */
    where?: BlogWhereInput
  }


  /**
   * Blog upsert
   */
  export type BlogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * The filter to search for the Blog to update in case it exists.
     */
    where: BlogWhereUniqueInput
    /**
     * In case the Blog found by the `where` argument doesn't exist, create a new Blog with this data.
     */
    create: XOR<BlogCreateInput, BlogUncheckedCreateInput>
    /**
     * In case the Blog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlogUpdateInput, BlogUncheckedUpdateInput>
  }


  /**
   * Blog delete
   */
  export type BlogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Filter which Blog to delete.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog deleteMany
   */
  export type BlogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Blogs to delete
     */
    where?: BlogWhereInput
  }


  /**
   * Blog without action
   */
  export type BlogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
  }



  /**
   * Model Statistics
   */

  export type AggregateStatistics = {
    _count: StatisticsCountAggregateOutputType | null
    _avg: StatisticsAvgAggregateOutputType | null
    _sum: StatisticsSumAggregateOutputType | null
    _min: StatisticsMinAggregateOutputType | null
    _max: StatisticsMaxAggregateOutputType | null
  }

  export type StatisticsAvgAggregateOutputType = {
    totalTransaction: number | null
    totalProduct: number | null
    totalCollection: number | null
    totalTrending: number | null
    totalAuthor: number | null
  }

  export type StatisticsSumAggregateOutputType = {
    totalTransaction: number | null
    totalProduct: number | null
    totalCollection: number | null
    totalTrending: number | null
    totalAuthor: number | null
  }

  export type StatisticsMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    totalTransaction: number | null
    totalProduct: number | null
    totalCollection: number | null
    totalTrending: number | null
    totalAuthor: number | null
  }

  export type StatisticsMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    totalTransaction: number | null
    totalProduct: number | null
    totalCollection: number | null
    totalTrending: number | null
    totalAuthor: number | null
  }

  export type StatisticsCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    totalTransaction: number
    totalProduct: number
    totalCollection: number
    totalTrending: number
    totalAuthor: number
    _all: number
  }


  export type StatisticsAvgAggregateInputType = {
    totalTransaction?: true
    totalProduct?: true
    totalCollection?: true
    totalTrending?: true
    totalAuthor?: true
  }

  export type StatisticsSumAggregateInputType = {
    totalTransaction?: true
    totalProduct?: true
    totalCollection?: true
    totalTrending?: true
    totalAuthor?: true
  }

  export type StatisticsMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    totalTransaction?: true
    totalProduct?: true
    totalCollection?: true
    totalTrending?: true
    totalAuthor?: true
  }

  export type StatisticsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    totalTransaction?: true
    totalProduct?: true
    totalCollection?: true
    totalTrending?: true
    totalAuthor?: true
  }

  export type StatisticsCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    totalTransaction?: true
    totalProduct?: true
    totalCollection?: true
    totalTrending?: true
    totalAuthor?: true
    _all?: true
  }

  export type StatisticsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statistics to aggregate.
     */
    where?: StatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: StatisticsOrderByWithRelationInput | StatisticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statistics
    **/
    _count?: true | StatisticsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatisticsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatisticsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatisticsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatisticsMaxAggregateInputType
  }

  export type GetStatisticsAggregateType<T extends StatisticsAggregateArgs> = {
        [P in keyof T & keyof AggregateStatistics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatistics[P]>
      : GetScalarType<T[P], AggregateStatistics[P]>
  }




  export type StatisticsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatisticsWhereInput
    orderBy?: StatisticsOrderByWithAggregationInput | StatisticsOrderByWithAggregationInput[]
    by: StatisticsScalarFieldEnum[] | StatisticsScalarFieldEnum
    having?: StatisticsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatisticsCountAggregateInputType | true
    _avg?: StatisticsAvgAggregateInputType
    _sum?: StatisticsSumAggregateInputType
    _min?: StatisticsMinAggregateInputType
    _max?: StatisticsMaxAggregateInputType
  }

  export type StatisticsGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    totalTransaction: number
    totalProduct: number
    totalCollection: number
    totalTrending: number
    totalAuthor: number
    _count: StatisticsCountAggregateOutputType | null
    _avg: StatisticsAvgAggregateOutputType | null
    _sum: StatisticsSumAggregateOutputType | null
    _min: StatisticsMinAggregateOutputType | null
    _max: StatisticsMaxAggregateOutputType | null
  }

  type GetStatisticsGroupByPayload<T extends StatisticsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatisticsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatisticsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatisticsGroupByOutputType[P]>
            : GetScalarType<T[P], StatisticsGroupByOutputType[P]>
        }
      >
    >


  export type StatisticsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalTransaction?: boolean
    totalProduct?: boolean
    totalCollection?: boolean
    totalTrending?: boolean
    totalAuthor?: boolean
  }, ExtArgs["result"]["statistics"]>

  export type StatisticsSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    totalTransaction?: boolean
    totalProduct?: boolean
    totalCollection?: boolean
    totalTrending?: boolean
    totalAuthor?: boolean
  }


  export type $StatisticsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Statistics"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      totalTransaction: number
      totalProduct: number
      totalCollection: number
      totalTrending: number
      totalAuthor: number
    }, ExtArgs["result"]["statistics"]>
    composites: {}
  }


  type StatisticsGetPayload<S extends boolean | null | undefined | StatisticsDefaultArgs> = $Result.GetResult<Prisma.$StatisticsPayload, S>

  type StatisticsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatisticsFindManyArgs, 'select' | 'include'> & {
      select?: StatisticsCountAggregateInputType | true
    }

  export interface StatisticsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Statistics'], meta: { name: 'Statistics' } }
    /**
     * Find zero or one Statistics that matches the filter.
     * @param {StatisticsFindUniqueArgs} args - Arguments to find a Statistics
     * @example
     * // Get one Statistics
     * const statistics = await prisma.statistics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatisticsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatisticsFindUniqueArgs<ExtArgs>>
    ): Prisma__StatisticsClient<$Result.GetResult<Prisma.$StatisticsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Statistics that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatisticsFindUniqueOrThrowArgs} args - Arguments to find a Statistics
     * @example
     * // Get one Statistics
     * const statistics = await prisma.statistics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatisticsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatisticsClient<$Result.GetResult<Prisma.$StatisticsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Statistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsFindFirstArgs} args - Arguments to find a Statistics
     * @example
     * // Get one Statistics
     * const statistics = await prisma.statistics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatisticsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticsFindFirstArgs<ExtArgs>>
    ): Prisma__StatisticsClient<$Result.GetResult<Prisma.$StatisticsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Statistics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsFindFirstOrThrowArgs} args - Arguments to find a Statistics
     * @example
     * // Get one Statistics
     * const statistics = await prisma.statistics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatisticsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatisticsClient<$Result.GetResult<Prisma.$StatisticsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Statistics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statistics
     * const statistics = await prisma.statistics.findMany()
     * 
     * // Get first 10 Statistics
     * const statistics = await prisma.statistics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statisticsWithIdOnly = await prisma.statistics.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatisticsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatisticsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Statistics.
     * @param {StatisticsCreateArgs} args - Arguments to create a Statistics.
     * @example
     * // Create one Statistics
     * const Statistics = await prisma.statistics.create({
     *   data: {
     *     // ... data to create a Statistics
     *   }
     * })
     * 
    **/
    create<T extends StatisticsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatisticsCreateArgs<ExtArgs>>
    ): Prisma__StatisticsClient<$Result.GetResult<Prisma.$StatisticsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Statistics.
     *     @param {StatisticsCreateManyArgs} args - Arguments to create many Statistics.
     *     @example
     *     // Create many Statistics
     *     const statistics = await prisma.statistics.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatisticsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Statistics.
     * @param {StatisticsDeleteArgs} args - Arguments to delete one Statistics.
     * @example
     * // Delete one Statistics
     * const Statistics = await prisma.statistics.delete({
     *   where: {
     *     // ... filter to delete one Statistics
     *   }
     * })
     * 
    **/
    delete<T extends StatisticsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatisticsDeleteArgs<ExtArgs>>
    ): Prisma__StatisticsClient<$Result.GetResult<Prisma.$StatisticsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Statistics.
     * @param {StatisticsUpdateArgs} args - Arguments to update one Statistics.
     * @example
     * // Update one Statistics
     * const statistics = await prisma.statistics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatisticsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatisticsUpdateArgs<ExtArgs>>
    ): Prisma__StatisticsClient<$Result.GetResult<Prisma.$StatisticsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Statistics.
     * @param {StatisticsDeleteManyArgs} args - Arguments to filter Statistics to delete.
     * @example
     * // Delete a few Statistics
     * const { count } = await prisma.statistics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatisticsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatisticsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statistics
     * const statistics = await prisma.statistics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatisticsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatisticsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Statistics.
     * @param {StatisticsUpsertArgs} args - Arguments to update or create a Statistics.
     * @example
     * // Update or create a Statistics
     * const statistics = await prisma.statistics.upsert({
     *   create: {
     *     // ... data to create a Statistics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Statistics we want to update
     *   }
     * })
    **/
    upsert<T extends StatisticsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatisticsUpsertArgs<ExtArgs>>
    ): Prisma__StatisticsClient<$Result.GetResult<Prisma.$StatisticsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsCountArgs} args - Arguments to filter Statistics to count.
     * @example
     * // Count the number of Statistics
     * const count = await prisma.statistics.count({
     *   where: {
     *     // ... the filter for the Statistics we want to count
     *   }
     * })
    **/
    count<T extends StatisticsCountArgs>(
      args?: Subset<T, StatisticsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatisticsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatisticsAggregateArgs>(args: Subset<T, StatisticsAggregateArgs>): Prisma.PrismaPromise<GetStatisticsAggregateType<T>>

    /**
     * Group by Statistics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatisticsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatisticsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatisticsGroupByArgs['orderBy'] }
        : { orderBy?: StatisticsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatisticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatisticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Statistics model
   */
  readonly fields: StatisticsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Statistics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatisticsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Statistics model
   */ 
  interface StatisticsFieldRefs {
    readonly id: FieldRef<"Statistics", 'String'>
    readonly createdAt: FieldRef<"Statistics", 'DateTime'>
    readonly updatedAt: FieldRef<"Statistics", 'DateTime'>
    readonly totalTransaction: FieldRef<"Statistics", 'Int'>
    readonly totalProduct: FieldRef<"Statistics", 'Int'>
    readonly totalCollection: FieldRef<"Statistics", 'Int'>
    readonly totalTrending: FieldRef<"Statistics", 'Int'>
    readonly totalAuthor: FieldRef<"Statistics", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Statistics findUnique
   */
  export type StatisticsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect<ExtArgs> | null
    /**
     * Filter, which Statistics to fetch.
     */
    where: StatisticsWhereUniqueInput
  }


  /**
   * Statistics findUniqueOrThrow
   */
  export type StatisticsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect<ExtArgs> | null
    /**
     * Filter, which Statistics to fetch.
     */
    where: StatisticsWhereUniqueInput
  }


  /**
   * Statistics findFirst
   */
  export type StatisticsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect<ExtArgs> | null
    /**
     * Filter, which Statistics to fetch.
     */
    where?: StatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: StatisticsOrderByWithRelationInput | StatisticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statistics.
     */
    cursor?: StatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statistics.
     */
    distinct?: StatisticsScalarFieldEnum | StatisticsScalarFieldEnum[]
  }


  /**
   * Statistics findFirstOrThrow
   */
  export type StatisticsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect<ExtArgs> | null
    /**
     * Filter, which Statistics to fetch.
     */
    where?: StatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: StatisticsOrderByWithRelationInput | StatisticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statistics.
     */
    cursor?: StatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statistics.
     */
    distinct?: StatisticsScalarFieldEnum | StatisticsScalarFieldEnum[]
  }


  /**
   * Statistics findMany
   */
  export type StatisticsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect<ExtArgs> | null
    /**
     * Filter, which Statistics to fetch.
     */
    where?: StatisticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statistics to fetch.
     */
    orderBy?: StatisticsOrderByWithRelationInput | StatisticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statistics.
     */
    cursor?: StatisticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statistics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statistics.
     */
    skip?: number
    distinct?: StatisticsScalarFieldEnum | StatisticsScalarFieldEnum[]
  }


  /**
   * Statistics create
   */
  export type StatisticsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect<ExtArgs> | null
    /**
     * The data needed to create a Statistics.
     */
    data: XOR<StatisticsCreateInput, StatisticsUncheckedCreateInput>
  }


  /**
   * Statistics createMany
   */
  export type StatisticsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Statistics.
     */
    data: StatisticsCreateManyInput | StatisticsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Statistics update
   */
  export type StatisticsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect<ExtArgs> | null
    /**
     * The data needed to update a Statistics.
     */
    data: XOR<StatisticsUpdateInput, StatisticsUncheckedUpdateInput>
    /**
     * Choose, which Statistics to update.
     */
    where: StatisticsWhereUniqueInput
  }


  /**
   * Statistics updateMany
   */
  export type StatisticsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Statistics.
     */
    data: XOR<StatisticsUpdateManyMutationInput, StatisticsUncheckedUpdateManyInput>
    /**
     * Filter which Statistics to update
     */
    where?: StatisticsWhereInput
  }


  /**
   * Statistics upsert
   */
  export type StatisticsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect<ExtArgs> | null
    /**
     * The filter to search for the Statistics to update in case it exists.
     */
    where: StatisticsWhereUniqueInput
    /**
     * In case the Statistics found by the `where` argument doesn't exist, create a new Statistics with this data.
     */
    create: XOR<StatisticsCreateInput, StatisticsUncheckedCreateInput>
    /**
     * In case the Statistics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatisticsUpdateInput, StatisticsUncheckedUpdateInput>
  }


  /**
   * Statistics delete
   */
  export type StatisticsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect<ExtArgs> | null
    /**
     * Filter which Statistics to delete.
     */
    where: StatisticsWhereUniqueInput
  }


  /**
   * Statistics deleteMany
   */
  export type StatisticsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statistics to delete
     */
    where?: StatisticsWhereInput
  }


  /**
   * Statistics without action
   */
  export type StatisticsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Statistics
     */
    select?: StatisticsSelect<ExtArgs> | null
  }



  /**
   * Model Founder
   */

  export type AggregateFounder = {
    _count: FounderCountAggregateOutputType | null
    _min: FounderMinAggregateOutputType | null
    _max: FounderMaxAggregateOutputType | null
  }

  export type FounderMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    fistName: string | null
    lastName: string | null
    role: string | null
    company: string | null
    avatar: string | null
  }

  export type FounderMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    fistName: string | null
    lastName: string | null
    role: string | null
    company: string | null
    avatar: string | null
  }

  export type FounderCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    fistName: number
    lastName: number
    role: number
    company: number
    avatar: number
    socialMediaUrl: number
    _all: number
  }


  export type FounderMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    fistName?: true
    lastName?: true
    role?: true
    company?: true
    avatar?: true
  }

  export type FounderMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    fistName?: true
    lastName?: true
    role?: true
    company?: true
    avatar?: true
  }

  export type FounderCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    fistName?: true
    lastName?: true
    role?: true
    company?: true
    avatar?: true
    socialMediaUrl?: true
    _all?: true
  }

  export type FounderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Founder to aggregate.
     */
    where?: FounderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Founders to fetch.
     */
    orderBy?: FounderOrderByWithRelationInput | FounderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FounderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Founders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Founders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Founders
    **/
    _count?: true | FounderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FounderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FounderMaxAggregateInputType
  }

  export type GetFounderAggregateType<T extends FounderAggregateArgs> = {
        [P in keyof T & keyof AggregateFounder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFounder[P]>
      : GetScalarType<T[P], AggregateFounder[P]>
  }




  export type FounderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FounderWhereInput
    orderBy?: FounderOrderByWithAggregationInput | FounderOrderByWithAggregationInput[]
    by: FounderScalarFieldEnum[] | FounderScalarFieldEnum
    having?: FounderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FounderCountAggregateInputType | true
    _min?: FounderMinAggregateInputType
    _max?: FounderMaxAggregateInputType
  }

  export type FounderGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    fistName: string
    lastName: string
    role: string
    company: string
    avatar: string
    socialMediaUrl: string[]
    _count: FounderCountAggregateOutputType | null
    _min: FounderMinAggregateOutputType | null
    _max: FounderMaxAggregateOutputType | null
  }

  type GetFounderGroupByPayload<T extends FounderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FounderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FounderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FounderGroupByOutputType[P]>
            : GetScalarType<T[P], FounderGroupByOutputType[P]>
        }
      >
    >


  export type FounderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fistName?: boolean
    lastName?: boolean
    role?: boolean
    company?: boolean
    avatar?: boolean
    socialMediaUrl?: boolean
  }, ExtArgs["result"]["founder"]>

  export type FounderSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fistName?: boolean
    lastName?: boolean
    role?: boolean
    company?: boolean
    avatar?: boolean
    socialMediaUrl?: boolean
  }


  export type $FounderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Founder"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      fistName: string
      lastName: string
      role: string
      company: string
      avatar: string
      socialMediaUrl: string[]
    }, ExtArgs["result"]["founder"]>
    composites: {}
  }


  type FounderGetPayload<S extends boolean | null | undefined | FounderDefaultArgs> = $Result.GetResult<Prisma.$FounderPayload, S>

  type FounderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FounderFindManyArgs, 'select' | 'include'> & {
      select?: FounderCountAggregateInputType | true
    }

  export interface FounderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Founder'], meta: { name: 'Founder' } }
    /**
     * Find zero or one Founder that matches the filter.
     * @param {FounderFindUniqueArgs} args - Arguments to find a Founder
     * @example
     * // Get one Founder
     * const founder = await prisma.founder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FounderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FounderFindUniqueArgs<ExtArgs>>
    ): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Founder that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FounderFindUniqueOrThrowArgs} args - Arguments to find a Founder
     * @example
     * // Get one Founder
     * const founder = await prisma.founder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FounderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FounderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Founder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderFindFirstArgs} args - Arguments to find a Founder
     * @example
     * // Get one Founder
     * const founder = await prisma.founder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FounderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FounderFindFirstArgs<ExtArgs>>
    ): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Founder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderFindFirstOrThrowArgs} args - Arguments to find a Founder
     * @example
     * // Get one Founder
     * const founder = await prisma.founder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FounderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FounderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Founders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Founders
     * const founders = await prisma.founder.findMany()
     * 
     * // Get first 10 Founders
     * const founders = await prisma.founder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const founderWithIdOnly = await prisma.founder.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FounderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FounderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Founder.
     * @param {FounderCreateArgs} args - Arguments to create a Founder.
     * @example
     * // Create one Founder
     * const Founder = await prisma.founder.create({
     *   data: {
     *     // ... data to create a Founder
     *   }
     * })
     * 
    **/
    create<T extends FounderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FounderCreateArgs<ExtArgs>>
    ): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Founders.
     *     @param {FounderCreateManyArgs} args - Arguments to create many Founders.
     *     @example
     *     // Create many Founders
     *     const founder = await prisma.founder.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FounderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FounderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Founder.
     * @param {FounderDeleteArgs} args - Arguments to delete one Founder.
     * @example
     * // Delete one Founder
     * const Founder = await prisma.founder.delete({
     *   where: {
     *     // ... filter to delete one Founder
     *   }
     * })
     * 
    **/
    delete<T extends FounderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FounderDeleteArgs<ExtArgs>>
    ): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Founder.
     * @param {FounderUpdateArgs} args - Arguments to update one Founder.
     * @example
     * // Update one Founder
     * const founder = await prisma.founder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FounderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FounderUpdateArgs<ExtArgs>>
    ): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Founders.
     * @param {FounderDeleteManyArgs} args - Arguments to filter Founders to delete.
     * @example
     * // Delete a few Founders
     * const { count } = await prisma.founder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FounderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FounderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Founders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Founders
     * const founder = await prisma.founder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FounderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FounderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Founder.
     * @param {FounderUpsertArgs} args - Arguments to update or create a Founder.
     * @example
     * // Update or create a Founder
     * const founder = await prisma.founder.upsert({
     *   create: {
     *     // ... data to create a Founder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Founder we want to update
     *   }
     * })
    **/
    upsert<T extends FounderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FounderUpsertArgs<ExtArgs>>
    ): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Founders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderCountArgs} args - Arguments to filter Founders to count.
     * @example
     * // Count the number of Founders
     * const count = await prisma.founder.count({
     *   where: {
     *     // ... the filter for the Founders we want to count
     *   }
     * })
    **/
    count<T extends FounderCountArgs>(
      args?: Subset<T, FounderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FounderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Founder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FounderAggregateArgs>(args: Subset<T, FounderAggregateArgs>): Prisma.PrismaPromise<GetFounderAggregateType<T>>

    /**
     * Group by Founder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FounderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FounderGroupByArgs['orderBy'] }
        : { orderBy?: FounderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FounderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFounderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Founder model
   */
  readonly fields: FounderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Founder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FounderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Founder model
   */ 
  interface FounderFieldRefs {
    readonly id: FieldRef<"Founder", 'String'>
    readonly createdAt: FieldRef<"Founder", 'DateTime'>
    readonly updatedAt: FieldRef<"Founder", 'DateTime'>
    readonly fistName: FieldRef<"Founder", 'String'>
    readonly lastName: FieldRef<"Founder", 'String'>
    readonly role: FieldRef<"Founder", 'String'>
    readonly company: FieldRef<"Founder", 'String'>
    readonly avatar: FieldRef<"Founder", 'String'>
    readonly socialMediaUrl: FieldRef<"Founder", 'String[]'>
  }
    

  // Custom InputTypes

  /**
   * Founder findUnique
   */
  export type FounderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Filter, which Founder to fetch.
     */
    where: FounderWhereUniqueInput
  }


  /**
   * Founder findUniqueOrThrow
   */
  export type FounderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Filter, which Founder to fetch.
     */
    where: FounderWhereUniqueInput
  }


  /**
   * Founder findFirst
   */
  export type FounderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Filter, which Founder to fetch.
     */
    where?: FounderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Founders to fetch.
     */
    orderBy?: FounderOrderByWithRelationInput | FounderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Founders.
     */
    cursor?: FounderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Founders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Founders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Founders.
     */
    distinct?: FounderScalarFieldEnum | FounderScalarFieldEnum[]
  }


  /**
   * Founder findFirstOrThrow
   */
  export type FounderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Filter, which Founder to fetch.
     */
    where?: FounderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Founders to fetch.
     */
    orderBy?: FounderOrderByWithRelationInput | FounderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Founders.
     */
    cursor?: FounderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Founders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Founders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Founders.
     */
    distinct?: FounderScalarFieldEnum | FounderScalarFieldEnum[]
  }


  /**
   * Founder findMany
   */
  export type FounderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Filter, which Founders to fetch.
     */
    where?: FounderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Founders to fetch.
     */
    orderBy?: FounderOrderByWithRelationInput | FounderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Founders.
     */
    cursor?: FounderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Founders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Founders.
     */
    skip?: number
    distinct?: FounderScalarFieldEnum | FounderScalarFieldEnum[]
  }


  /**
   * Founder create
   */
  export type FounderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * The data needed to create a Founder.
     */
    data: XOR<FounderCreateInput, FounderUncheckedCreateInput>
  }


  /**
   * Founder createMany
   */
  export type FounderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Founders.
     */
    data: FounderCreateManyInput | FounderCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Founder update
   */
  export type FounderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * The data needed to update a Founder.
     */
    data: XOR<FounderUpdateInput, FounderUncheckedUpdateInput>
    /**
     * Choose, which Founder to update.
     */
    where: FounderWhereUniqueInput
  }


  /**
   * Founder updateMany
   */
  export type FounderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Founders.
     */
    data: XOR<FounderUpdateManyMutationInput, FounderUncheckedUpdateManyInput>
    /**
     * Filter which Founders to update
     */
    where?: FounderWhereInput
  }


  /**
   * Founder upsert
   */
  export type FounderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * The filter to search for the Founder to update in case it exists.
     */
    where: FounderWhereUniqueInput
    /**
     * In case the Founder found by the `where` argument doesn't exist, create a new Founder with this data.
     */
    create: XOR<FounderCreateInput, FounderUncheckedCreateInput>
    /**
     * In case the Founder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FounderUpdateInput, FounderUncheckedUpdateInput>
  }


  /**
   * Founder delete
   */
  export type FounderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Filter which Founder to delete.
     */
    where: FounderWhereUniqueInput
  }


  /**
   * Founder deleteMany
   */
  export type FounderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Founders to delete
     */
    where?: FounderWhereInput
  }


  /**
   * Founder without action
   */
  export type FounderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    policyId: 'policyId',
    address: 'address',
    email: 'email',
    name: 'name',
    description: 'description',
    rating: 'rating',
    cover: 'cover',
    avatar: 'avatar',
    socialMediaUrl: 'socialMediaUrl',
    followed: 'followed',
    validate: 'validate'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const CollectionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    title: 'title',
    description: 'description',
    avatar: 'avatar',
    cover: 'cover',
    url: 'url',
    accoutnId: 'accoutnId'
  };

  export type CollectionScalarFieldEnum = (typeof CollectionScalarFieldEnum)[keyof typeof CollectionScalarFieldEnum]


  export const CollectionCategoryScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    collectionId: 'collectionId',
    categoryId: 'categoryId'
  };

  export type CollectionCategoryScalarFieldEnum = (typeof CollectionCategoryScalarFieldEnum)[keyof typeof CollectionCategoryScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const NftScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    validate: 'validate',
    policyId: 'policyId',
    assetName: 'assetName',
    status: 'status',
    collectionId: 'collectionId',
    countOfTransaction: 'countOfTransaction'
  };

  export type NftScalarFieldEnum = (typeof NftScalarFieldEnum)[keyof typeof NftScalarFieldEnum]


  export const CartNftScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    cartId: 'cartId',
    nftId: 'nftId'
  };

  export type CartNftScalarFieldEnum = (typeof CartNftScalarFieldEnum)[keyof typeof CartNftScalarFieldEnum]


  export const CartScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    accountId: 'accountId'
  };

  export type CartScalarFieldEnum = (typeof CartScalarFieldEnum)[keyof typeof CartScalarFieldEnum]


  export const GuideScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    question: 'question',
    title: 'title',
    description: 'description',
    url: 'url'
  };

  export type GuideScalarFieldEnum = (typeof GuideScalarFieldEnum)[keyof typeof GuideScalarFieldEnum]


  export const BlogScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BlogScalarFieldEnum = (typeof BlogScalarFieldEnum)[keyof typeof BlogScalarFieldEnum]


  export const StatisticsScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    totalTransaction: 'totalTransaction',
    totalProduct: 'totalProduct',
    totalCollection: 'totalCollection',
    totalTrending: 'totalTrending',
    totalAuthor: 'totalAuthor'
  };

  export type StatisticsScalarFieldEnum = (typeof StatisticsScalarFieldEnum)[keyof typeof StatisticsScalarFieldEnum]


  export const FounderScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    fistName: 'fistName',
    lastName: 'lastName',
    role: 'role',
    company: 'company',
    avatar: 'avatar',
    socialMediaUrl: 'socialMediaUrl'
  };

  export type FounderScalarFieldEnum = (typeof FounderScalarFieldEnum)[keyof typeof FounderScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'StatusNft'
   */
  export type EnumStatusNftFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusNft'>
    


  /**
   * Reference to a field of type 'StatusNft[]'
   */
  export type ListEnumStatusNftFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusNft[]'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    policyId?: StringFilter<"Account"> | string
    address?: StringFilter<"Account"> | string
    email?: StringFilter<"Account"> | string
    name?: StringFilter<"Account"> | string
    description?: StringFilter<"Account"> | string
    rating?: FloatNullableFilter<"Account"> | number | null
    cover?: StringFilter<"Account"> | string
    avatar?: StringFilter<"Account"> | string
    socialMediaUrl?: StringNullableListFilter<"Account">
    followed?: IntNullableFilter<"Account"> | number | null
    validate?: BoolFilter<"Account"> | boolean
    cart?: XOR<CartNullableRelationFilter, CartWhereInput> | null
    collections?: CollectionListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    policyId?: SortOrder
    address?: SortOrder
    email?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rating?: SortOrderInput | SortOrder
    cover?: SortOrder
    avatar?: SortOrder
    socialMediaUrl?: SortOrder
    followed?: SortOrderInput | SortOrder
    validate?: SortOrder
    cart?: CartOrderByWithRelationInput
    collections?: CollectionOrderByRelationAggregateInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    address?: string
    email?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    policyId?: StringFilter<"Account"> | string
    name?: StringFilter<"Account"> | string
    description?: StringFilter<"Account"> | string
    rating?: FloatNullableFilter<"Account"> | number | null
    cover?: StringFilter<"Account"> | string
    avatar?: StringFilter<"Account"> | string
    socialMediaUrl?: StringNullableListFilter<"Account">
    followed?: IntNullableFilter<"Account"> | number | null
    validate?: BoolFilter<"Account"> | boolean
    cart?: XOR<CartNullableRelationFilter, CartWhereInput> | null
    collections?: CollectionListRelationFilter
  }, "id" | "address" | "email">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    policyId?: SortOrder
    address?: SortOrder
    email?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rating?: SortOrderInput | SortOrder
    cover?: SortOrder
    avatar?: SortOrder
    socialMediaUrl?: SortOrder
    followed?: SortOrderInput | SortOrder
    validate?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    policyId?: StringWithAggregatesFilter<"Account"> | string
    address?: StringWithAggregatesFilter<"Account"> | string
    email?: StringWithAggregatesFilter<"Account"> | string
    name?: StringWithAggregatesFilter<"Account"> | string
    description?: StringWithAggregatesFilter<"Account"> | string
    rating?: FloatNullableWithAggregatesFilter<"Account"> | number | null
    cover?: StringWithAggregatesFilter<"Account"> | string
    avatar?: StringWithAggregatesFilter<"Account"> | string
    socialMediaUrl?: StringNullableListFilter<"Account">
    followed?: IntNullableWithAggregatesFilter<"Account"> | number | null
    validate?: BoolWithAggregatesFilter<"Account"> | boolean
  }

  export type CollectionWhereInput = {
    AND?: CollectionWhereInput | CollectionWhereInput[]
    OR?: CollectionWhereInput[]
    NOT?: CollectionWhereInput | CollectionWhereInput[]
    id?: StringFilter<"Collection"> | string
    createdAt?: DateTimeFilter<"Collection"> | Date | string
    updatedAt?: DateTimeFilter<"Collection"> | Date | string
    title?: StringNullableFilter<"Collection"> | string | null
    description?: StringNullableFilter<"Collection"> | string | null
    avatar?: StringNullableFilter<"Collection"> | string | null
    cover?: StringNullableFilter<"Collection"> | string | null
    url?: StringNullableFilter<"Collection"> | string | null
    accoutnId?: StringFilter<"Collection"> | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    nfts?: NftListRelationFilter
    categories?: CollectionCategoryListRelationFilter
  }

  export type CollectionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    cover?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    accoutnId?: SortOrder
    account?: AccountOrderByWithRelationInput
    nfts?: NftOrderByRelationAggregateInput
    categories?: CollectionCategoryOrderByRelationAggregateInput
  }

  export type CollectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CollectionWhereInput | CollectionWhereInput[]
    OR?: CollectionWhereInput[]
    NOT?: CollectionWhereInput | CollectionWhereInput[]
    createdAt?: DateTimeFilter<"Collection"> | Date | string
    updatedAt?: DateTimeFilter<"Collection"> | Date | string
    title?: StringNullableFilter<"Collection"> | string | null
    description?: StringNullableFilter<"Collection"> | string | null
    avatar?: StringNullableFilter<"Collection"> | string | null
    cover?: StringNullableFilter<"Collection"> | string | null
    url?: StringNullableFilter<"Collection"> | string | null
    accoutnId?: StringFilter<"Collection"> | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    nfts?: NftListRelationFilter
    categories?: CollectionCategoryListRelationFilter
  }, "id">

  export type CollectionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    cover?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    accoutnId?: SortOrder
    _count?: CollectionCountOrderByAggregateInput
    _max?: CollectionMaxOrderByAggregateInput
    _min?: CollectionMinOrderByAggregateInput
  }

  export type CollectionScalarWhereWithAggregatesInput = {
    AND?: CollectionScalarWhereWithAggregatesInput | CollectionScalarWhereWithAggregatesInput[]
    OR?: CollectionScalarWhereWithAggregatesInput[]
    NOT?: CollectionScalarWhereWithAggregatesInput | CollectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Collection"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Collection"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Collection"> | Date | string
    title?: StringNullableWithAggregatesFilter<"Collection"> | string | null
    description?: StringNullableWithAggregatesFilter<"Collection"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"Collection"> | string | null
    cover?: StringNullableWithAggregatesFilter<"Collection"> | string | null
    url?: StringNullableWithAggregatesFilter<"Collection"> | string | null
    accoutnId?: StringWithAggregatesFilter<"Collection"> | string
  }

  export type CollectionCategoryWhereInput = {
    AND?: CollectionCategoryWhereInput | CollectionCategoryWhereInput[]
    OR?: CollectionCategoryWhereInput[]
    NOT?: CollectionCategoryWhereInput | CollectionCategoryWhereInput[]
    createdAt?: DateTimeFilter<"CollectionCategory"> | Date | string
    updatedAt?: DateTimeFilter<"CollectionCategory"> | Date | string
    collectionId?: StringFilter<"CollectionCategory"> | string
    categoryId?: StringFilter<"CollectionCategory"> | string
    collection?: XOR<CollectionRelationFilter, CollectionWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }

  export type CollectionCategoryOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    collectionId?: SortOrder
    categoryId?: SortOrder
    collection?: CollectionOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
  }

  export type CollectionCategoryWhereUniqueInput = Prisma.AtLeast<{
    categoryId_collectionId?: CollectionCategoryCategoryIdCollectionIdCompoundUniqueInput
    AND?: CollectionCategoryWhereInput | CollectionCategoryWhereInput[]
    OR?: CollectionCategoryWhereInput[]
    NOT?: CollectionCategoryWhereInput | CollectionCategoryWhereInput[]
    createdAt?: DateTimeFilter<"CollectionCategory"> | Date | string
    updatedAt?: DateTimeFilter<"CollectionCategory"> | Date | string
    collectionId?: StringFilter<"CollectionCategory"> | string
    categoryId?: StringFilter<"CollectionCategory"> | string
    collection?: XOR<CollectionRelationFilter, CollectionWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }, "categoryId_collectionId">

  export type CollectionCategoryOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    collectionId?: SortOrder
    categoryId?: SortOrder
    _count?: CollectionCategoryCountOrderByAggregateInput
    _max?: CollectionCategoryMaxOrderByAggregateInput
    _min?: CollectionCategoryMinOrderByAggregateInput
  }

  export type CollectionCategoryScalarWhereWithAggregatesInput = {
    AND?: CollectionCategoryScalarWhereWithAggregatesInput | CollectionCategoryScalarWhereWithAggregatesInput[]
    OR?: CollectionCategoryScalarWhereWithAggregatesInput[]
    NOT?: CollectionCategoryScalarWhereWithAggregatesInput | CollectionCategoryScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"CollectionCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CollectionCategory"> | Date | string
    collectionId?: StringWithAggregatesFilter<"CollectionCategory"> | string
    categoryId?: StringWithAggregatesFilter<"CollectionCategory"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    name?: StringFilter<"Category"> | string
    collections?: CollectionCategoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    collections?: CollectionCategoryOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    name?: StringFilter<"Category"> | string
    collections?: CollectionCategoryListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    name?: StringWithAggregatesFilter<"Category"> | string
  }

  export type NftWhereInput = {
    AND?: NftWhereInput | NftWhereInput[]
    OR?: NftWhereInput[]
    NOT?: NftWhereInput | NftWhereInput[]
    id?: StringFilter<"Nft"> | string
    createdAt?: DateTimeFilter<"Nft"> | Date | string
    updatedAt?: DateTimeFilter<"Nft"> | Date | string
    validate?: BoolFilter<"Nft"> | boolean
    policyId?: StringFilter<"Nft"> | string
    assetName?: StringFilter<"Nft"> | string
    status?: EnumStatusNftNullableFilter<"Nft"> | $Enums.StatusNft | null
    collectionId?: StringFilter<"Nft"> | string
    countOfTransaction?: IntNullableFilter<"Nft"> | number | null
    collection?: XOR<CollectionRelationFilter, CollectionWhereInput>
    cart?: CartNftListRelationFilter
  }

  export type NftOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    validate?: SortOrder
    policyId?: SortOrder
    assetName?: SortOrder
    status?: SortOrderInput | SortOrder
    collectionId?: SortOrder
    countOfTransaction?: SortOrderInput | SortOrder
    collection?: CollectionOrderByWithRelationInput
    cart?: CartNftOrderByRelationAggregateInput
  }

  export type NftWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    policyId?: string
    assetName?: string
    AND?: NftWhereInput | NftWhereInput[]
    OR?: NftWhereInput[]
    NOT?: NftWhereInput | NftWhereInput[]
    createdAt?: DateTimeFilter<"Nft"> | Date | string
    updatedAt?: DateTimeFilter<"Nft"> | Date | string
    validate?: BoolFilter<"Nft"> | boolean
    status?: EnumStatusNftNullableFilter<"Nft"> | $Enums.StatusNft | null
    collectionId?: StringFilter<"Nft"> | string
    countOfTransaction?: IntNullableFilter<"Nft"> | number | null
    collection?: XOR<CollectionRelationFilter, CollectionWhereInput>
    cart?: CartNftListRelationFilter
  }, "id" | "policyId" | "assetName">

  export type NftOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    validate?: SortOrder
    policyId?: SortOrder
    assetName?: SortOrder
    status?: SortOrderInput | SortOrder
    collectionId?: SortOrder
    countOfTransaction?: SortOrderInput | SortOrder
    _count?: NftCountOrderByAggregateInput
    _avg?: NftAvgOrderByAggregateInput
    _max?: NftMaxOrderByAggregateInput
    _min?: NftMinOrderByAggregateInput
    _sum?: NftSumOrderByAggregateInput
  }

  export type NftScalarWhereWithAggregatesInput = {
    AND?: NftScalarWhereWithAggregatesInput | NftScalarWhereWithAggregatesInput[]
    OR?: NftScalarWhereWithAggregatesInput[]
    NOT?: NftScalarWhereWithAggregatesInput | NftScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Nft"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Nft"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Nft"> | Date | string
    validate?: BoolWithAggregatesFilter<"Nft"> | boolean
    policyId?: StringWithAggregatesFilter<"Nft"> | string
    assetName?: StringWithAggregatesFilter<"Nft"> | string
    status?: EnumStatusNftNullableWithAggregatesFilter<"Nft"> | $Enums.StatusNft | null
    collectionId?: StringWithAggregatesFilter<"Nft"> | string
    countOfTransaction?: IntNullableWithAggregatesFilter<"Nft"> | number | null
  }

  export type CartNftWhereInput = {
    AND?: CartNftWhereInput | CartNftWhereInput[]
    OR?: CartNftWhereInput[]
    NOT?: CartNftWhereInput | CartNftWhereInput[]
    createdAt?: DateTimeFilter<"CartNft"> | Date | string
    updatedAt?: DateTimeFilter<"CartNft"> | Date | string
    cartId?: StringFilter<"CartNft"> | string
    nftId?: StringFilter<"CartNft"> | string
    cart?: XOR<CartRelationFilter, CartWhereInput>
    nft?: XOR<NftRelationFilter, NftWhereInput>
  }

  export type CartNftOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cartId?: SortOrder
    nftId?: SortOrder
    cart?: CartOrderByWithRelationInput
    nft?: NftOrderByWithRelationInput
  }

  export type CartNftWhereUniqueInput = Prisma.AtLeast<{
    cartId_nftId?: CartNftCartIdNftIdCompoundUniqueInput
    AND?: CartNftWhereInput | CartNftWhereInput[]
    OR?: CartNftWhereInput[]
    NOT?: CartNftWhereInput | CartNftWhereInput[]
    createdAt?: DateTimeFilter<"CartNft"> | Date | string
    updatedAt?: DateTimeFilter<"CartNft"> | Date | string
    cartId?: StringFilter<"CartNft"> | string
    nftId?: StringFilter<"CartNft"> | string
    cart?: XOR<CartRelationFilter, CartWhereInput>
    nft?: XOR<NftRelationFilter, NftWhereInput>
  }, "cartId_nftId">

  export type CartNftOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cartId?: SortOrder
    nftId?: SortOrder
    _count?: CartNftCountOrderByAggregateInput
    _max?: CartNftMaxOrderByAggregateInput
    _min?: CartNftMinOrderByAggregateInput
  }

  export type CartNftScalarWhereWithAggregatesInput = {
    AND?: CartNftScalarWhereWithAggregatesInput | CartNftScalarWhereWithAggregatesInput[]
    OR?: CartNftScalarWhereWithAggregatesInput[]
    NOT?: CartNftScalarWhereWithAggregatesInput | CartNftScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"CartNft"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CartNft"> | Date | string
    cartId?: StringWithAggregatesFilter<"CartNft"> | string
    nftId?: StringWithAggregatesFilter<"CartNft"> | string
  }

  export type CartWhereInput = {
    AND?: CartWhereInput | CartWhereInput[]
    OR?: CartWhereInput[]
    NOT?: CartWhereInput | CartWhereInput[]
    id?: StringFilter<"Cart"> | string
    createdAt?: DateTimeFilter<"Cart"> | Date | string
    updatedAt?: DateTimeFilter<"Cart"> | Date | string
    accountId?: StringFilter<"Cart"> | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    nfts?: CartNftListRelationFilter
  }

  export type CartOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accountId?: SortOrder
    account?: AccountOrderByWithRelationInput
    nfts?: CartNftOrderByRelationAggregateInput
  }

  export type CartWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    accountId?: string
    AND?: CartWhereInput | CartWhereInput[]
    OR?: CartWhereInput[]
    NOT?: CartWhereInput | CartWhereInput[]
    createdAt?: DateTimeFilter<"Cart"> | Date | string
    updatedAt?: DateTimeFilter<"Cart"> | Date | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    nfts?: CartNftListRelationFilter
  }, "id" | "accountId">

  export type CartOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accountId?: SortOrder
    _count?: CartCountOrderByAggregateInput
    _max?: CartMaxOrderByAggregateInput
    _min?: CartMinOrderByAggregateInput
  }

  export type CartScalarWhereWithAggregatesInput = {
    AND?: CartScalarWhereWithAggregatesInput | CartScalarWhereWithAggregatesInput[]
    OR?: CartScalarWhereWithAggregatesInput[]
    NOT?: CartScalarWhereWithAggregatesInput | CartScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cart"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Cart"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Cart"> | Date | string
    accountId?: StringWithAggregatesFilter<"Cart"> | string
  }

  export type GuideWhereInput = {
    AND?: GuideWhereInput | GuideWhereInput[]
    OR?: GuideWhereInput[]
    NOT?: GuideWhereInput | GuideWhereInput[]
    id?: StringFilter<"Guide"> | string
    createdAt?: DateTimeFilter<"Guide"> | Date | string
    updatedAt?: DateTimeFilter<"Guide"> | Date | string
    question?: StringFilter<"Guide"> | string
    title?: StringFilter<"Guide"> | string
    description?: StringFilter<"Guide"> | string
    url?: StringFilter<"Guide"> | string
  }

  export type GuideOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    question?: SortOrder
    title?: SortOrder
    description?: SortOrder
    url?: SortOrder
  }

  export type GuideWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GuideWhereInput | GuideWhereInput[]
    OR?: GuideWhereInput[]
    NOT?: GuideWhereInput | GuideWhereInput[]
    createdAt?: DateTimeFilter<"Guide"> | Date | string
    updatedAt?: DateTimeFilter<"Guide"> | Date | string
    question?: StringFilter<"Guide"> | string
    title?: StringFilter<"Guide"> | string
    description?: StringFilter<"Guide"> | string
    url?: StringFilter<"Guide"> | string
  }, "id">

  export type GuideOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    question?: SortOrder
    title?: SortOrder
    description?: SortOrder
    url?: SortOrder
    _count?: GuideCountOrderByAggregateInput
    _max?: GuideMaxOrderByAggregateInput
    _min?: GuideMinOrderByAggregateInput
  }

  export type GuideScalarWhereWithAggregatesInput = {
    AND?: GuideScalarWhereWithAggregatesInput | GuideScalarWhereWithAggregatesInput[]
    OR?: GuideScalarWhereWithAggregatesInput[]
    NOT?: GuideScalarWhereWithAggregatesInput | GuideScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Guide"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Guide"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Guide"> | Date | string
    question?: StringWithAggregatesFilter<"Guide"> | string
    title?: StringWithAggregatesFilter<"Guide"> | string
    description?: StringWithAggregatesFilter<"Guide"> | string
    url?: StringWithAggregatesFilter<"Guide"> | string
  }

  export type BlogWhereInput = {
    AND?: BlogWhereInput | BlogWhereInput[]
    OR?: BlogWhereInput[]
    NOT?: BlogWhereInput | BlogWhereInput[]
    id?: StringFilter<"Blog"> | string
    createdAt?: DateTimeFilter<"Blog"> | Date | string
    updatedAt?: DateTimeFilter<"Blog"> | Date | string
  }

  export type BlogOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BlogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BlogWhereInput | BlogWhereInput[]
    OR?: BlogWhereInput[]
    NOT?: BlogWhereInput | BlogWhereInput[]
    createdAt?: DateTimeFilter<"Blog"> | Date | string
    updatedAt?: DateTimeFilter<"Blog"> | Date | string
  }, "id">

  export type BlogOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BlogCountOrderByAggregateInput
    _max?: BlogMaxOrderByAggregateInput
    _min?: BlogMinOrderByAggregateInput
  }

  export type BlogScalarWhereWithAggregatesInput = {
    AND?: BlogScalarWhereWithAggregatesInput | BlogScalarWhereWithAggregatesInput[]
    OR?: BlogScalarWhereWithAggregatesInput[]
    NOT?: BlogScalarWhereWithAggregatesInput | BlogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Blog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Blog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Blog"> | Date | string
  }

  export type StatisticsWhereInput = {
    AND?: StatisticsWhereInput | StatisticsWhereInput[]
    OR?: StatisticsWhereInput[]
    NOT?: StatisticsWhereInput | StatisticsWhereInput[]
    id?: StringFilter<"Statistics"> | string
    createdAt?: DateTimeFilter<"Statistics"> | Date | string
    updatedAt?: DateTimeFilter<"Statistics"> | Date | string
    totalTransaction?: IntFilter<"Statistics"> | number
    totalProduct?: IntFilter<"Statistics"> | number
    totalCollection?: IntFilter<"Statistics"> | number
    totalTrending?: IntFilter<"Statistics"> | number
    totalAuthor?: IntFilter<"Statistics"> | number
  }

  export type StatisticsOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalTransaction?: SortOrder
    totalProduct?: SortOrder
    totalCollection?: SortOrder
    totalTrending?: SortOrder
    totalAuthor?: SortOrder
  }

  export type StatisticsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StatisticsWhereInput | StatisticsWhereInput[]
    OR?: StatisticsWhereInput[]
    NOT?: StatisticsWhereInput | StatisticsWhereInput[]
    createdAt?: DateTimeFilter<"Statistics"> | Date | string
    updatedAt?: DateTimeFilter<"Statistics"> | Date | string
    totalTransaction?: IntFilter<"Statistics"> | number
    totalProduct?: IntFilter<"Statistics"> | number
    totalCollection?: IntFilter<"Statistics"> | number
    totalTrending?: IntFilter<"Statistics"> | number
    totalAuthor?: IntFilter<"Statistics"> | number
  }, "id">

  export type StatisticsOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalTransaction?: SortOrder
    totalProduct?: SortOrder
    totalCollection?: SortOrder
    totalTrending?: SortOrder
    totalAuthor?: SortOrder
    _count?: StatisticsCountOrderByAggregateInput
    _avg?: StatisticsAvgOrderByAggregateInput
    _max?: StatisticsMaxOrderByAggregateInput
    _min?: StatisticsMinOrderByAggregateInput
    _sum?: StatisticsSumOrderByAggregateInput
  }

  export type StatisticsScalarWhereWithAggregatesInput = {
    AND?: StatisticsScalarWhereWithAggregatesInput | StatisticsScalarWhereWithAggregatesInput[]
    OR?: StatisticsScalarWhereWithAggregatesInput[]
    NOT?: StatisticsScalarWhereWithAggregatesInput | StatisticsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Statistics"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Statistics"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Statistics"> | Date | string
    totalTransaction?: IntWithAggregatesFilter<"Statistics"> | number
    totalProduct?: IntWithAggregatesFilter<"Statistics"> | number
    totalCollection?: IntWithAggregatesFilter<"Statistics"> | number
    totalTrending?: IntWithAggregatesFilter<"Statistics"> | number
    totalAuthor?: IntWithAggregatesFilter<"Statistics"> | number
  }

  export type FounderWhereInput = {
    AND?: FounderWhereInput | FounderWhereInput[]
    OR?: FounderWhereInput[]
    NOT?: FounderWhereInput | FounderWhereInput[]
    id?: StringFilter<"Founder"> | string
    createdAt?: DateTimeFilter<"Founder"> | Date | string
    updatedAt?: DateTimeFilter<"Founder"> | Date | string
    fistName?: StringFilter<"Founder"> | string
    lastName?: StringFilter<"Founder"> | string
    role?: StringFilter<"Founder"> | string
    company?: StringFilter<"Founder"> | string
    avatar?: StringFilter<"Founder"> | string
    socialMediaUrl?: StringNullableListFilter<"Founder">
  }

  export type FounderOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fistName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    company?: SortOrder
    avatar?: SortOrder
    socialMediaUrl?: SortOrder
  }

  export type FounderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FounderWhereInput | FounderWhereInput[]
    OR?: FounderWhereInput[]
    NOT?: FounderWhereInput | FounderWhereInput[]
    createdAt?: DateTimeFilter<"Founder"> | Date | string
    updatedAt?: DateTimeFilter<"Founder"> | Date | string
    fistName?: StringFilter<"Founder"> | string
    lastName?: StringFilter<"Founder"> | string
    role?: StringFilter<"Founder"> | string
    company?: StringFilter<"Founder"> | string
    avatar?: StringFilter<"Founder"> | string
    socialMediaUrl?: StringNullableListFilter<"Founder">
  }, "id">

  export type FounderOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fistName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    company?: SortOrder
    avatar?: SortOrder
    socialMediaUrl?: SortOrder
    _count?: FounderCountOrderByAggregateInput
    _max?: FounderMaxOrderByAggregateInput
    _min?: FounderMinOrderByAggregateInput
  }

  export type FounderScalarWhereWithAggregatesInput = {
    AND?: FounderScalarWhereWithAggregatesInput | FounderScalarWhereWithAggregatesInput[]
    OR?: FounderScalarWhereWithAggregatesInput[]
    NOT?: FounderScalarWhereWithAggregatesInput | FounderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Founder"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Founder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Founder"> | Date | string
    fistName?: StringWithAggregatesFilter<"Founder"> | string
    lastName?: StringWithAggregatesFilter<"Founder"> | string
    role?: StringWithAggregatesFilter<"Founder"> | string
    company?: StringWithAggregatesFilter<"Founder"> | string
    avatar?: StringWithAggregatesFilter<"Founder"> | string
    socialMediaUrl?: StringNullableListFilter<"Founder">
  }

  export type AccountCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    policyId: string
    address: string
    email: string
    name: string
    description: string
    rating?: number | null
    cover: string
    avatar: string
    socialMediaUrl?: AccountCreatesocialMediaUrlInput | string[]
    followed?: number | null
    validate?: boolean
    cart?: CartCreateNestedOneWithoutAccountInput
    collections?: CollectionCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    policyId: string
    address: string
    email: string
    name: string
    description: string
    rating?: number | null
    cover: string
    avatar: string
    socialMediaUrl?: AccountCreatesocialMediaUrlInput | string[]
    followed?: number | null
    validate?: boolean
    cart?: CartUncheckedCreateNestedOneWithoutAccountInput
    collections?: CollectionUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policyId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    cover?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    socialMediaUrl?: AccountUpdatesocialMediaUrlInput | string[]
    followed?: NullableIntFieldUpdateOperationsInput | number | null
    validate?: BoolFieldUpdateOperationsInput | boolean
    cart?: CartUpdateOneWithoutAccountNestedInput
    collections?: CollectionUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policyId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    cover?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    socialMediaUrl?: AccountUpdatesocialMediaUrlInput | string[]
    followed?: NullableIntFieldUpdateOperationsInput | number | null
    validate?: BoolFieldUpdateOperationsInput | boolean
    cart?: CartUncheckedUpdateOneWithoutAccountNestedInput
    collections?: CollectionUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    policyId: string
    address: string
    email: string
    name: string
    description: string
    rating?: number | null
    cover: string
    avatar: string
    socialMediaUrl?: AccountCreatesocialMediaUrlInput | string[]
    followed?: number | null
    validate?: boolean
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policyId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    cover?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    socialMediaUrl?: AccountUpdatesocialMediaUrlInput | string[]
    followed?: NullableIntFieldUpdateOperationsInput | number | null
    validate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policyId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    cover?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    socialMediaUrl?: AccountUpdatesocialMediaUrlInput | string[]
    followed?: NullableIntFieldUpdateOperationsInput | number | null
    validate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CollectionCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    avatar?: string | null
    cover?: string | null
    url?: string | null
    account: AccountCreateNestedOneWithoutCollectionsInput
    nfts?: NftCreateNestedManyWithoutCollectionInput
    categories?: CollectionCategoryCreateNestedManyWithoutCollectionInput
  }

  export type CollectionUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    avatar?: string | null
    cover?: string | null
    url?: string | null
    accoutnId: string
    nfts?: NftUncheckedCreateNestedManyWithoutCollectionInput
    categories?: CollectionCategoryUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type CollectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    account?: AccountUpdateOneRequiredWithoutCollectionsNestedInput
    nfts?: NftUpdateManyWithoutCollectionNestedInput
    categories?: CollectionCategoryUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    accoutnId?: StringFieldUpdateOperationsInput | string
    nfts?: NftUncheckedUpdateManyWithoutCollectionNestedInput
    categories?: CollectionCategoryUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    avatar?: string | null
    cover?: string | null
    url?: string | null
    accoutnId: string
  }

  export type CollectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CollectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    accoutnId?: StringFieldUpdateOperationsInput | string
  }

  export type CollectionCategoryCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    collection: CollectionCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutCollectionsInput
  }

  export type CollectionCategoryUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    collectionId: string
    categoryId: string
  }

  export type CollectionCategoryUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collection?: CollectionUpdateOneRequiredWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutCollectionsNestedInput
  }

  export type CollectionCategoryUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collectionId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type CollectionCategoryCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    collectionId: string
    categoryId: string
  }

  export type CollectionCategoryUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionCategoryUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collectionId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    collections?: CollectionCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    collections?: CollectionCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    collections?: CollectionCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    collections?: CollectionCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type NftCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    validate?: boolean
    policyId: string
    assetName: string
    status?: $Enums.StatusNft | null
    countOfTransaction?: number | null
    collection: CollectionCreateNestedOneWithoutNftsInput
    cart?: CartNftCreateNestedManyWithoutNftInput
  }

  export type NftUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    validate?: boolean
    policyId: string
    assetName: string
    status?: $Enums.StatusNft | null
    collectionId: string
    countOfTransaction?: number | null
    cart?: CartNftUncheckedCreateNestedManyWithoutNftInput
  }

  export type NftUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validate?: BoolFieldUpdateOperationsInput | boolean
    policyId?: StringFieldUpdateOperationsInput | string
    assetName?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumStatusNftFieldUpdateOperationsInput | $Enums.StatusNft | null
    countOfTransaction?: NullableIntFieldUpdateOperationsInput | number | null
    collection?: CollectionUpdateOneRequiredWithoutNftsNestedInput
    cart?: CartNftUpdateManyWithoutNftNestedInput
  }

  export type NftUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validate?: BoolFieldUpdateOperationsInput | boolean
    policyId?: StringFieldUpdateOperationsInput | string
    assetName?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumStatusNftFieldUpdateOperationsInput | $Enums.StatusNft | null
    collectionId?: StringFieldUpdateOperationsInput | string
    countOfTransaction?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: CartNftUncheckedUpdateManyWithoutNftNestedInput
  }

  export type NftCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    validate?: boolean
    policyId: string
    assetName: string
    status?: $Enums.StatusNft | null
    collectionId: string
    countOfTransaction?: number | null
  }

  export type NftUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validate?: BoolFieldUpdateOperationsInput | boolean
    policyId?: StringFieldUpdateOperationsInput | string
    assetName?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumStatusNftFieldUpdateOperationsInput | $Enums.StatusNft | null
    countOfTransaction?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NftUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validate?: BoolFieldUpdateOperationsInput | boolean
    policyId?: StringFieldUpdateOperationsInput | string
    assetName?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumStatusNftFieldUpdateOperationsInput | $Enums.StatusNft | null
    collectionId?: StringFieldUpdateOperationsInput | string
    countOfTransaction?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CartNftCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    cart: CartCreateNestedOneWithoutNftsInput
    nft: NftCreateNestedOneWithoutCartInput
  }

  export type CartNftUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    cartId: string
    nftId: string
  }

  export type CartNftUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cart?: CartUpdateOneRequiredWithoutNftsNestedInput
    nft?: NftUpdateOneRequiredWithoutCartNestedInput
  }

  export type CartNftUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cartId?: StringFieldUpdateOperationsInput | string
    nftId?: StringFieldUpdateOperationsInput | string
  }

  export type CartNftCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    cartId: string
    nftId: string
  }

  export type CartNftUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartNftUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cartId?: StringFieldUpdateOperationsInput | string
    nftId?: StringFieldUpdateOperationsInput | string
  }

  export type CartCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account: AccountCreateNestedOneWithoutCartInput
    nfts?: CartNftCreateNestedManyWithoutCartInput
  }

  export type CartUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accountId: string
    nfts?: CartNftUncheckedCreateNestedManyWithoutCartInput
  }

  export type CartUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutCartNestedInput
    nfts?: CartNftUpdateManyWithoutCartNestedInput
  }

  export type CartUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: StringFieldUpdateOperationsInput | string
    nfts?: CartNftUncheckedUpdateManyWithoutCartNestedInput
  }

  export type CartCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accountId: string
  }

  export type CartUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: StringFieldUpdateOperationsInput | string
  }

  export type GuideCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    question: string
    title: string
    description: string
    url: string
  }

  export type GuideUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    question: string
    title: string
    description: string
    url: string
  }

  export type GuideUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type GuideUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type GuideCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    question: string
    title: string
    description: string
    url: string
  }

  export type GuideUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type GuideUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type BlogCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BlogUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BlogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlogCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BlogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BlogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatisticsCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalTransaction?: number
    totalProduct?: number
    totalCollection?: number
    totalTrending?: number
    totalAuthor?: number
  }

  export type StatisticsUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalTransaction?: number
    totalProduct?: number
    totalCollection?: number
    totalTrending?: number
    totalAuthor?: number
  }

  export type StatisticsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalTransaction?: IntFieldUpdateOperationsInput | number
    totalProduct?: IntFieldUpdateOperationsInput | number
    totalCollection?: IntFieldUpdateOperationsInput | number
    totalTrending?: IntFieldUpdateOperationsInput | number
    totalAuthor?: IntFieldUpdateOperationsInput | number
  }

  export type StatisticsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalTransaction?: IntFieldUpdateOperationsInput | number
    totalProduct?: IntFieldUpdateOperationsInput | number
    totalCollection?: IntFieldUpdateOperationsInput | number
    totalTrending?: IntFieldUpdateOperationsInput | number
    totalAuthor?: IntFieldUpdateOperationsInput | number
  }

  export type StatisticsCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    totalTransaction?: number
    totalProduct?: number
    totalCollection?: number
    totalTrending?: number
    totalAuthor?: number
  }

  export type StatisticsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalTransaction?: IntFieldUpdateOperationsInput | number
    totalProduct?: IntFieldUpdateOperationsInput | number
    totalCollection?: IntFieldUpdateOperationsInput | number
    totalTrending?: IntFieldUpdateOperationsInput | number
    totalAuthor?: IntFieldUpdateOperationsInput | number
  }

  export type StatisticsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalTransaction?: IntFieldUpdateOperationsInput | number
    totalProduct?: IntFieldUpdateOperationsInput | number
    totalCollection?: IntFieldUpdateOperationsInput | number
    totalTrending?: IntFieldUpdateOperationsInput | number
    totalAuthor?: IntFieldUpdateOperationsInput | number
  }

  export type FounderCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fistName: string
    lastName: string
    role: string
    company?: string
    avatar: string
    socialMediaUrl?: FounderCreatesocialMediaUrlInput | string[]
  }

  export type FounderUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fistName: string
    lastName: string
    role: string
    company?: string
    avatar: string
    socialMediaUrl?: FounderCreatesocialMediaUrlInput | string[]
  }

  export type FounderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fistName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    socialMediaUrl?: FounderUpdatesocialMediaUrlInput | string[]
  }

  export type FounderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fistName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    socialMediaUrl?: FounderUpdatesocialMediaUrlInput | string[]
  }

  export type FounderCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fistName: string
    lastName: string
    role: string
    company?: string
    avatar: string
    socialMediaUrl?: FounderCreatesocialMediaUrlInput | string[]
  }

  export type FounderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fistName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    socialMediaUrl?: FounderUpdatesocialMediaUrlInput | string[]
  }

  export type FounderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fistName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    socialMediaUrl?: FounderUpdatesocialMediaUrlInput | string[]
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CartNullableRelationFilter = {
    is?: CartWhereInput | null
    isNot?: CartWhereInput | null
  }

  export type CollectionListRelationFilter = {
    every?: CollectionWhereInput
    some?: CollectionWhereInput
    none?: CollectionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CollectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    policyId?: SortOrder
    address?: SortOrder
    email?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rating?: SortOrder
    cover?: SortOrder
    avatar?: SortOrder
    socialMediaUrl?: SortOrder
    followed?: SortOrder
    validate?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    rating?: SortOrder
    followed?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    policyId?: SortOrder
    address?: SortOrder
    email?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rating?: SortOrder
    cover?: SortOrder
    avatar?: SortOrder
    followed?: SortOrder
    validate?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    policyId?: SortOrder
    address?: SortOrder
    email?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rating?: SortOrder
    cover?: SortOrder
    avatar?: SortOrder
    followed?: SortOrder
    validate?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    rating?: SortOrder
    followed?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AccountRelationFilter = {
    is?: AccountWhereInput
    isNot?: AccountWhereInput
  }

  export type NftListRelationFilter = {
    every?: NftWhereInput
    some?: NftWhereInput
    none?: NftWhereInput
  }

  export type CollectionCategoryListRelationFilter = {
    every?: CollectionCategoryWhereInput
    some?: CollectionCategoryWhereInput
    none?: CollectionCategoryWhereInput
  }

  export type NftOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CollectionCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CollectionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    avatar?: SortOrder
    cover?: SortOrder
    url?: SortOrder
    accoutnId?: SortOrder
  }

  export type CollectionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    avatar?: SortOrder
    cover?: SortOrder
    url?: SortOrder
    accoutnId?: SortOrder
  }

  export type CollectionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    avatar?: SortOrder
    cover?: SortOrder
    url?: SortOrder
    accoutnId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CollectionRelationFilter = {
    is?: CollectionWhereInput
    isNot?: CollectionWhereInput
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type CollectionCategoryCategoryIdCollectionIdCompoundUniqueInput = {
    categoryId: string
    collectionId: string
  }

  export type CollectionCategoryCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    collectionId?: SortOrder
    categoryId?: SortOrder
  }

  export type CollectionCategoryMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    collectionId?: SortOrder
    categoryId?: SortOrder
  }

  export type CollectionCategoryMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    collectionId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
  }

  export type EnumStatusNftNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusNft | EnumStatusNftFieldRefInput<$PrismaModel> | null
    in?: $Enums.StatusNft[] | ListEnumStatusNftFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StatusNft[] | ListEnumStatusNftFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStatusNftNullableFilter<$PrismaModel> | $Enums.StatusNft | null
  }

  export type CartNftListRelationFilter = {
    every?: CartNftWhereInput
    some?: CartNftWhereInput
    none?: CartNftWhereInput
  }

  export type CartNftOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NftCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    validate?: SortOrder
    policyId?: SortOrder
    assetName?: SortOrder
    status?: SortOrder
    collectionId?: SortOrder
    countOfTransaction?: SortOrder
  }

  export type NftAvgOrderByAggregateInput = {
    countOfTransaction?: SortOrder
  }

  export type NftMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    validate?: SortOrder
    policyId?: SortOrder
    assetName?: SortOrder
    status?: SortOrder
    collectionId?: SortOrder
    countOfTransaction?: SortOrder
  }

  export type NftMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    validate?: SortOrder
    policyId?: SortOrder
    assetName?: SortOrder
    status?: SortOrder
    collectionId?: SortOrder
    countOfTransaction?: SortOrder
  }

  export type NftSumOrderByAggregateInput = {
    countOfTransaction?: SortOrder
  }

  export type EnumStatusNftNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusNft | EnumStatusNftFieldRefInput<$PrismaModel> | null
    in?: $Enums.StatusNft[] | ListEnumStatusNftFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StatusNft[] | ListEnumStatusNftFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStatusNftNullableWithAggregatesFilter<$PrismaModel> | $Enums.StatusNft | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStatusNftNullableFilter<$PrismaModel>
    _max?: NestedEnumStatusNftNullableFilter<$PrismaModel>
  }

  export type CartRelationFilter = {
    is?: CartWhereInput
    isNot?: CartWhereInput
  }

  export type NftRelationFilter = {
    is?: NftWhereInput
    isNot?: NftWhereInput
  }

  export type CartNftCartIdNftIdCompoundUniqueInput = {
    cartId: string
    nftId: string
  }

  export type CartNftCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cartId?: SortOrder
    nftId?: SortOrder
  }

  export type CartNftMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cartId?: SortOrder
    nftId?: SortOrder
  }

  export type CartNftMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cartId?: SortOrder
    nftId?: SortOrder
  }

  export type CartCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accountId?: SortOrder
  }

  export type CartMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accountId?: SortOrder
  }

  export type CartMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accountId?: SortOrder
  }

  export type GuideCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    question?: SortOrder
    title?: SortOrder
    description?: SortOrder
    url?: SortOrder
  }

  export type GuideMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    question?: SortOrder
    title?: SortOrder
    description?: SortOrder
    url?: SortOrder
  }

  export type GuideMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    question?: SortOrder
    title?: SortOrder
    description?: SortOrder
    url?: SortOrder
  }

  export type BlogCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BlogMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BlogMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StatisticsCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalTransaction?: SortOrder
    totalProduct?: SortOrder
    totalCollection?: SortOrder
    totalTrending?: SortOrder
    totalAuthor?: SortOrder
  }

  export type StatisticsAvgOrderByAggregateInput = {
    totalTransaction?: SortOrder
    totalProduct?: SortOrder
    totalCollection?: SortOrder
    totalTrending?: SortOrder
    totalAuthor?: SortOrder
  }

  export type StatisticsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalTransaction?: SortOrder
    totalProduct?: SortOrder
    totalCollection?: SortOrder
    totalTrending?: SortOrder
    totalAuthor?: SortOrder
  }

  export type StatisticsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    totalTransaction?: SortOrder
    totalProduct?: SortOrder
    totalCollection?: SortOrder
    totalTrending?: SortOrder
    totalAuthor?: SortOrder
  }

  export type StatisticsSumOrderByAggregateInput = {
    totalTransaction?: SortOrder
    totalProduct?: SortOrder
    totalCollection?: SortOrder
    totalTrending?: SortOrder
    totalAuthor?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FounderCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fistName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    company?: SortOrder
    avatar?: SortOrder
    socialMediaUrl?: SortOrder
  }

  export type FounderMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fistName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    company?: SortOrder
    avatar?: SortOrder
  }

  export type FounderMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fistName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    company?: SortOrder
    avatar?: SortOrder
  }

  export type AccountCreatesocialMediaUrlInput = {
    set: string[]
  }

  export type CartCreateNestedOneWithoutAccountInput = {
    create?: XOR<CartCreateWithoutAccountInput, CartUncheckedCreateWithoutAccountInput>
    connectOrCreate?: CartCreateOrConnectWithoutAccountInput
    connect?: CartWhereUniqueInput
  }

  export type CollectionCreateNestedManyWithoutAccountInput = {
    create?: XOR<CollectionCreateWithoutAccountInput, CollectionUncheckedCreateWithoutAccountInput> | CollectionCreateWithoutAccountInput[] | CollectionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutAccountInput | CollectionCreateOrConnectWithoutAccountInput[]
    createMany?: CollectionCreateManyAccountInputEnvelope
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
  }

  export type CartUncheckedCreateNestedOneWithoutAccountInput = {
    create?: XOR<CartCreateWithoutAccountInput, CartUncheckedCreateWithoutAccountInput>
    connectOrCreate?: CartCreateOrConnectWithoutAccountInput
    connect?: CartWhereUniqueInput
  }

  export type CollectionUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<CollectionCreateWithoutAccountInput, CollectionUncheckedCreateWithoutAccountInput> | CollectionCreateWithoutAccountInput[] | CollectionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutAccountInput | CollectionCreateOrConnectWithoutAccountInput[]
    createMany?: CollectionCreateManyAccountInputEnvelope
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountUpdatesocialMediaUrlInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CartUpdateOneWithoutAccountNestedInput = {
    create?: XOR<CartCreateWithoutAccountInput, CartUncheckedCreateWithoutAccountInput>
    connectOrCreate?: CartCreateOrConnectWithoutAccountInput
    upsert?: CartUpsertWithoutAccountInput
    disconnect?: CartWhereInput | boolean
    delete?: CartWhereInput | boolean
    connect?: CartWhereUniqueInput
    update?: XOR<XOR<CartUpdateToOneWithWhereWithoutAccountInput, CartUpdateWithoutAccountInput>, CartUncheckedUpdateWithoutAccountInput>
  }

  export type CollectionUpdateManyWithoutAccountNestedInput = {
    create?: XOR<CollectionCreateWithoutAccountInput, CollectionUncheckedCreateWithoutAccountInput> | CollectionCreateWithoutAccountInput[] | CollectionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutAccountInput | CollectionCreateOrConnectWithoutAccountInput[]
    upsert?: CollectionUpsertWithWhereUniqueWithoutAccountInput | CollectionUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: CollectionCreateManyAccountInputEnvelope
    set?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    disconnect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    delete?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    update?: CollectionUpdateWithWhereUniqueWithoutAccountInput | CollectionUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: CollectionUpdateManyWithWhereWithoutAccountInput | CollectionUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
  }

  export type CartUncheckedUpdateOneWithoutAccountNestedInput = {
    create?: XOR<CartCreateWithoutAccountInput, CartUncheckedCreateWithoutAccountInput>
    connectOrCreate?: CartCreateOrConnectWithoutAccountInput
    upsert?: CartUpsertWithoutAccountInput
    disconnect?: CartWhereInput | boolean
    delete?: CartWhereInput | boolean
    connect?: CartWhereUniqueInput
    update?: XOR<XOR<CartUpdateToOneWithWhereWithoutAccountInput, CartUpdateWithoutAccountInput>, CartUncheckedUpdateWithoutAccountInput>
  }

  export type CollectionUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<CollectionCreateWithoutAccountInput, CollectionUncheckedCreateWithoutAccountInput> | CollectionCreateWithoutAccountInput[] | CollectionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutAccountInput | CollectionCreateOrConnectWithoutAccountInput[]
    upsert?: CollectionUpsertWithWhereUniqueWithoutAccountInput | CollectionUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: CollectionCreateManyAccountInputEnvelope
    set?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    disconnect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    delete?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    update?: CollectionUpdateWithWhereUniqueWithoutAccountInput | CollectionUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: CollectionUpdateManyWithWhereWithoutAccountInput | CollectionUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
  }

  export type AccountCreateNestedOneWithoutCollectionsInput = {
    create?: XOR<AccountCreateWithoutCollectionsInput, AccountUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutCollectionsInput
    connect?: AccountWhereUniqueInput
  }

  export type NftCreateNestedManyWithoutCollectionInput = {
    create?: XOR<NftCreateWithoutCollectionInput, NftUncheckedCreateWithoutCollectionInput> | NftCreateWithoutCollectionInput[] | NftUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: NftCreateOrConnectWithoutCollectionInput | NftCreateOrConnectWithoutCollectionInput[]
    createMany?: NftCreateManyCollectionInputEnvelope
    connect?: NftWhereUniqueInput | NftWhereUniqueInput[]
  }

  export type CollectionCategoryCreateNestedManyWithoutCollectionInput = {
    create?: XOR<CollectionCategoryCreateWithoutCollectionInput, CollectionCategoryUncheckedCreateWithoutCollectionInput> | CollectionCategoryCreateWithoutCollectionInput[] | CollectionCategoryUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: CollectionCategoryCreateOrConnectWithoutCollectionInput | CollectionCategoryCreateOrConnectWithoutCollectionInput[]
    createMany?: CollectionCategoryCreateManyCollectionInputEnvelope
    connect?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
  }

  export type NftUncheckedCreateNestedManyWithoutCollectionInput = {
    create?: XOR<NftCreateWithoutCollectionInput, NftUncheckedCreateWithoutCollectionInput> | NftCreateWithoutCollectionInput[] | NftUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: NftCreateOrConnectWithoutCollectionInput | NftCreateOrConnectWithoutCollectionInput[]
    createMany?: NftCreateManyCollectionInputEnvelope
    connect?: NftWhereUniqueInput | NftWhereUniqueInput[]
  }

  export type CollectionCategoryUncheckedCreateNestedManyWithoutCollectionInput = {
    create?: XOR<CollectionCategoryCreateWithoutCollectionInput, CollectionCategoryUncheckedCreateWithoutCollectionInput> | CollectionCategoryCreateWithoutCollectionInput[] | CollectionCategoryUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: CollectionCategoryCreateOrConnectWithoutCollectionInput | CollectionCategoryCreateOrConnectWithoutCollectionInput[]
    createMany?: CollectionCategoryCreateManyCollectionInputEnvelope
    connect?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AccountUpdateOneRequiredWithoutCollectionsNestedInput = {
    create?: XOR<AccountCreateWithoutCollectionsInput, AccountUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutCollectionsInput
    upsert?: AccountUpsertWithoutCollectionsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutCollectionsInput, AccountUpdateWithoutCollectionsInput>, AccountUncheckedUpdateWithoutCollectionsInput>
  }

  export type NftUpdateManyWithoutCollectionNestedInput = {
    create?: XOR<NftCreateWithoutCollectionInput, NftUncheckedCreateWithoutCollectionInput> | NftCreateWithoutCollectionInput[] | NftUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: NftCreateOrConnectWithoutCollectionInput | NftCreateOrConnectWithoutCollectionInput[]
    upsert?: NftUpsertWithWhereUniqueWithoutCollectionInput | NftUpsertWithWhereUniqueWithoutCollectionInput[]
    createMany?: NftCreateManyCollectionInputEnvelope
    set?: NftWhereUniqueInput | NftWhereUniqueInput[]
    disconnect?: NftWhereUniqueInput | NftWhereUniqueInput[]
    delete?: NftWhereUniqueInput | NftWhereUniqueInput[]
    connect?: NftWhereUniqueInput | NftWhereUniqueInput[]
    update?: NftUpdateWithWhereUniqueWithoutCollectionInput | NftUpdateWithWhereUniqueWithoutCollectionInput[]
    updateMany?: NftUpdateManyWithWhereWithoutCollectionInput | NftUpdateManyWithWhereWithoutCollectionInput[]
    deleteMany?: NftScalarWhereInput | NftScalarWhereInput[]
  }

  export type CollectionCategoryUpdateManyWithoutCollectionNestedInput = {
    create?: XOR<CollectionCategoryCreateWithoutCollectionInput, CollectionCategoryUncheckedCreateWithoutCollectionInput> | CollectionCategoryCreateWithoutCollectionInput[] | CollectionCategoryUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: CollectionCategoryCreateOrConnectWithoutCollectionInput | CollectionCategoryCreateOrConnectWithoutCollectionInput[]
    upsert?: CollectionCategoryUpsertWithWhereUniqueWithoutCollectionInput | CollectionCategoryUpsertWithWhereUniqueWithoutCollectionInput[]
    createMany?: CollectionCategoryCreateManyCollectionInputEnvelope
    set?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    disconnect?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    delete?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    connect?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    update?: CollectionCategoryUpdateWithWhereUniqueWithoutCollectionInput | CollectionCategoryUpdateWithWhereUniqueWithoutCollectionInput[]
    updateMany?: CollectionCategoryUpdateManyWithWhereWithoutCollectionInput | CollectionCategoryUpdateManyWithWhereWithoutCollectionInput[]
    deleteMany?: CollectionCategoryScalarWhereInput | CollectionCategoryScalarWhereInput[]
  }

  export type NftUncheckedUpdateManyWithoutCollectionNestedInput = {
    create?: XOR<NftCreateWithoutCollectionInput, NftUncheckedCreateWithoutCollectionInput> | NftCreateWithoutCollectionInput[] | NftUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: NftCreateOrConnectWithoutCollectionInput | NftCreateOrConnectWithoutCollectionInput[]
    upsert?: NftUpsertWithWhereUniqueWithoutCollectionInput | NftUpsertWithWhereUniqueWithoutCollectionInput[]
    createMany?: NftCreateManyCollectionInputEnvelope
    set?: NftWhereUniqueInput | NftWhereUniqueInput[]
    disconnect?: NftWhereUniqueInput | NftWhereUniqueInput[]
    delete?: NftWhereUniqueInput | NftWhereUniqueInput[]
    connect?: NftWhereUniqueInput | NftWhereUniqueInput[]
    update?: NftUpdateWithWhereUniqueWithoutCollectionInput | NftUpdateWithWhereUniqueWithoutCollectionInput[]
    updateMany?: NftUpdateManyWithWhereWithoutCollectionInput | NftUpdateManyWithWhereWithoutCollectionInput[]
    deleteMany?: NftScalarWhereInput | NftScalarWhereInput[]
  }

  export type CollectionCategoryUncheckedUpdateManyWithoutCollectionNestedInput = {
    create?: XOR<CollectionCategoryCreateWithoutCollectionInput, CollectionCategoryUncheckedCreateWithoutCollectionInput> | CollectionCategoryCreateWithoutCollectionInput[] | CollectionCategoryUncheckedCreateWithoutCollectionInput[]
    connectOrCreate?: CollectionCategoryCreateOrConnectWithoutCollectionInput | CollectionCategoryCreateOrConnectWithoutCollectionInput[]
    upsert?: CollectionCategoryUpsertWithWhereUniqueWithoutCollectionInput | CollectionCategoryUpsertWithWhereUniqueWithoutCollectionInput[]
    createMany?: CollectionCategoryCreateManyCollectionInputEnvelope
    set?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    disconnect?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    delete?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    connect?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    update?: CollectionCategoryUpdateWithWhereUniqueWithoutCollectionInput | CollectionCategoryUpdateWithWhereUniqueWithoutCollectionInput[]
    updateMany?: CollectionCategoryUpdateManyWithWhereWithoutCollectionInput | CollectionCategoryUpdateManyWithWhereWithoutCollectionInput[]
    deleteMany?: CollectionCategoryScalarWhereInput | CollectionCategoryScalarWhereInput[]
  }

  export type CollectionCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<CollectionCreateWithoutCategoriesInput, CollectionUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: CollectionCreateOrConnectWithoutCategoriesInput
    connect?: CollectionWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutCollectionsInput = {
    create?: XOR<CategoryCreateWithoutCollectionsInput, CategoryUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCollectionsInput
    connect?: CategoryWhereUniqueInput
  }

  export type CollectionUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<CollectionCreateWithoutCategoriesInput, CollectionUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: CollectionCreateOrConnectWithoutCategoriesInput
    upsert?: CollectionUpsertWithoutCategoriesInput
    connect?: CollectionWhereUniqueInput
    update?: XOR<XOR<CollectionUpdateToOneWithWhereWithoutCategoriesInput, CollectionUpdateWithoutCategoriesInput>, CollectionUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutCollectionsNestedInput = {
    create?: XOR<CategoryCreateWithoutCollectionsInput, CategoryUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCollectionsInput
    upsert?: CategoryUpsertWithoutCollectionsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutCollectionsInput, CategoryUpdateWithoutCollectionsInput>, CategoryUncheckedUpdateWithoutCollectionsInput>
  }

  export type CollectionCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CollectionCategoryCreateWithoutCategoryInput, CollectionCategoryUncheckedCreateWithoutCategoryInput> | CollectionCategoryCreateWithoutCategoryInput[] | CollectionCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CollectionCategoryCreateOrConnectWithoutCategoryInput | CollectionCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: CollectionCategoryCreateManyCategoryInputEnvelope
    connect?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
  }

  export type CollectionCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CollectionCategoryCreateWithoutCategoryInput, CollectionCategoryUncheckedCreateWithoutCategoryInput> | CollectionCategoryCreateWithoutCategoryInput[] | CollectionCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CollectionCategoryCreateOrConnectWithoutCategoryInput | CollectionCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: CollectionCategoryCreateManyCategoryInputEnvelope
    connect?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
  }

  export type CollectionCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CollectionCategoryCreateWithoutCategoryInput, CollectionCategoryUncheckedCreateWithoutCategoryInput> | CollectionCategoryCreateWithoutCategoryInput[] | CollectionCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CollectionCategoryCreateOrConnectWithoutCategoryInput | CollectionCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: CollectionCategoryUpsertWithWhereUniqueWithoutCategoryInput | CollectionCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CollectionCategoryCreateManyCategoryInputEnvelope
    set?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    disconnect?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    delete?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    connect?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    update?: CollectionCategoryUpdateWithWhereUniqueWithoutCategoryInput | CollectionCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CollectionCategoryUpdateManyWithWhereWithoutCategoryInput | CollectionCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CollectionCategoryScalarWhereInput | CollectionCategoryScalarWhereInput[]
  }

  export type CollectionCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CollectionCategoryCreateWithoutCategoryInput, CollectionCategoryUncheckedCreateWithoutCategoryInput> | CollectionCategoryCreateWithoutCategoryInput[] | CollectionCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CollectionCategoryCreateOrConnectWithoutCategoryInput | CollectionCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: CollectionCategoryUpsertWithWhereUniqueWithoutCategoryInput | CollectionCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CollectionCategoryCreateManyCategoryInputEnvelope
    set?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    disconnect?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    delete?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    connect?: CollectionCategoryWhereUniqueInput | CollectionCategoryWhereUniqueInput[]
    update?: CollectionCategoryUpdateWithWhereUniqueWithoutCategoryInput | CollectionCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CollectionCategoryUpdateManyWithWhereWithoutCategoryInput | CollectionCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CollectionCategoryScalarWhereInput | CollectionCategoryScalarWhereInput[]
  }

  export type CollectionCreateNestedOneWithoutNftsInput = {
    create?: XOR<CollectionCreateWithoutNftsInput, CollectionUncheckedCreateWithoutNftsInput>
    connectOrCreate?: CollectionCreateOrConnectWithoutNftsInput
    connect?: CollectionWhereUniqueInput
  }

  export type CartNftCreateNestedManyWithoutNftInput = {
    create?: XOR<CartNftCreateWithoutNftInput, CartNftUncheckedCreateWithoutNftInput> | CartNftCreateWithoutNftInput[] | CartNftUncheckedCreateWithoutNftInput[]
    connectOrCreate?: CartNftCreateOrConnectWithoutNftInput | CartNftCreateOrConnectWithoutNftInput[]
    createMany?: CartNftCreateManyNftInputEnvelope
    connect?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
  }

  export type CartNftUncheckedCreateNestedManyWithoutNftInput = {
    create?: XOR<CartNftCreateWithoutNftInput, CartNftUncheckedCreateWithoutNftInput> | CartNftCreateWithoutNftInput[] | CartNftUncheckedCreateWithoutNftInput[]
    connectOrCreate?: CartNftCreateOrConnectWithoutNftInput | CartNftCreateOrConnectWithoutNftInput[]
    createMany?: CartNftCreateManyNftInputEnvelope
    connect?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
  }

  export type NullableEnumStatusNftFieldUpdateOperationsInput = {
    set?: $Enums.StatusNft | null
  }

  export type CollectionUpdateOneRequiredWithoutNftsNestedInput = {
    create?: XOR<CollectionCreateWithoutNftsInput, CollectionUncheckedCreateWithoutNftsInput>
    connectOrCreate?: CollectionCreateOrConnectWithoutNftsInput
    upsert?: CollectionUpsertWithoutNftsInput
    connect?: CollectionWhereUniqueInput
    update?: XOR<XOR<CollectionUpdateToOneWithWhereWithoutNftsInput, CollectionUpdateWithoutNftsInput>, CollectionUncheckedUpdateWithoutNftsInput>
  }

  export type CartNftUpdateManyWithoutNftNestedInput = {
    create?: XOR<CartNftCreateWithoutNftInput, CartNftUncheckedCreateWithoutNftInput> | CartNftCreateWithoutNftInput[] | CartNftUncheckedCreateWithoutNftInput[]
    connectOrCreate?: CartNftCreateOrConnectWithoutNftInput | CartNftCreateOrConnectWithoutNftInput[]
    upsert?: CartNftUpsertWithWhereUniqueWithoutNftInput | CartNftUpsertWithWhereUniqueWithoutNftInput[]
    createMany?: CartNftCreateManyNftInputEnvelope
    set?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    disconnect?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    delete?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    connect?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    update?: CartNftUpdateWithWhereUniqueWithoutNftInput | CartNftUpdateWithWhereUniqueWithoutNftInput[]
    updateMany?: CartNftUpdateManyWithWhereWithoutNftInput | CartNftUpdateManyWithWhereWithoutNftInput[]
    deleteMany?: CartNftScalarWhereInput | CartNftScalarWhereInput[]
  }

  export type CartNftUncheckedUpdateManyWithoutNftNestedInput = {
    create?: XOR<CartNftCreateWithoutNftInput, CartNftUncheckedCreateWithoutNftInput> | CartNftCreateWithoutNftInput[] | CartNftUncheckedCreateWithoutNftInput[]
    connectOrCreate?: CartNftCreateOrConnectWithoutNftInput | CartNftCreateOrConnectWithoutNftInput[]
    upsert?: CartNftUpsertWithWhereUniqueWithoutNftInput | CartNftUpsertWithWhereUniqueWithoutNftInput[]
    createMany?: CartNftCreateManyNftInputEnvelope
    set?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    disconnect?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    delete?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    connect?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    update?: CartNftUpdateWithWhereUniqueWithoutNftInput | CartNftUpdateWithWhereUniqueWithoutNftInput[]
    updateMany?: CartNftUpdateManyWithWhereWithoutNftInput | CartNftUpdateManyWithWhereWithoutNftInput[]
    deleteMany?: CartNftScalarWhereInput | CartNftScalarWhereInput[]
  }

  export type CartCreateNestedOneWithoutNftsInput = {
    create?: XOR<CartCreateWithoutNftsInput, CartUncheckedCreateWithoutNftsInput>
    connectOrCreate?: CartCreateOrConnectWithoutNftsInput
    connect?: CartWhereUniqueInput
  }

  export type NftCreateNestedOneWithoutCartInput = {
    create?: XOR<NftCreateWithoutCartInput, NftUncheckedCreateWithoutCartInput>
    connectOrCreate?: NftCreateOrConnectWithoutCartInput
    connect?: NftWhereUniqueInput
  }

  export type CartUpdateOneRequiredWithoutNftsNestedInput = {
    create?: XOR<CartCreateWithoutNftsInput, CartUncheckedCreateWithoutNftsInput>
    connectOrCreate?: CartCreateOrConnectWithoutNftsInput
    upsert?: CartUpsertWithoutNftsInput
    connect?: CartWhereUniqueInput
    update?: XOR<XOR<CartUpdateToOneWithWhereWithoutNftsInput, CartUpdateWithoutNftsInput>, CartUncheckedUpdateWithoutNftsInput>
  }

  export type NftUpdateOneRequiredWithoutCartNestedInput = {
    create?: XOR<NftCreateWithoutCartInput, NftUncheckedCreateWithoutCartInput>
    connectOrCreate?: NftCreateOrConnectWithoutCartInput
    upsert?: NftUpsertWithoutCartInput
    connect?: NftWhereUniqueInput
    update?: XOR<XOR<NftUpdateToOneWithWhereWithoutCartInput, NftUpdateWithoutCartInput>, NftUncheckedUpdateWithoutCartInput>
  }

  export type AccountCreateNestedOneWithoutCartInput = {
    create?: XOR<AccountCreateWithoutCartInput, AccountUncheckedCreateWithoutCartInput>
    connectOrCreate?: AccountCreateOrConnectWithoutCartInput
    connect?: AccountWhereUniqueInput
  }

  export type CartNftCreateNestedManyWithoutCartInput = {
    create?: XOR<CartNftCreateWithoutCartInput, CartNftUncheckedCreateWithoutCartInput> | CartNftCreateWithoutCartInput[] | CartNftUncheckedCreateWithoutCartInput[]
    connectOrCreate?: CartNftCreateOrConnectWithoutCartInput | CartNftCreateOrConnectWithoutCartInput[]
    createMany?: CartNftCreateManyCartInputEnvelope
    connect?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
  }

  export type CartNftUncheckedCreateNestedManyWithoutCartInput = {
    create?: XOR<CartNftCreateWithoutCartInput, CartNftUncheckedCreateWithoutCartInput> | CartNftCreateWithoutCartInput[] | CartNftUncheckedCreateWithoutCartInput[]
    connectOrCreate?: CartNftCreateOrConnectWithoutCartInput | CartNftCreateOrConnectWithoutCartInput[]
    createMany?: CartNftCreateManyCartInputEnvelope
    connect?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
  }

  export type AccountUpdateOneRequiredWithoutCartNestedInput = {
    create?: XOR<AccountCreateWithoutCartInput, AccountUncheckedCreateWithoutCartInput>
    connectOrCreate?: AccountCreateOrConnectWithoutCartInput
    upsert?: AccountUpsertWithoutCartInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutCartInput, AccountUpdateWithoutCartInput>, AccountUncheckedUpdateWithoutCartInput>
  }

  export type CartNftUpdateManyWithoutCartNestedInput = {
    create?: XOR<CartNftCreateWithoutCartInput, CartNftUncheckedCreateWithoutCartInput> | CartNftCreateWithoutCartInput[] | CartNftUncheckedCreateWithoutCartInput[]
    connectOrCreate?: CartNftCreateOrConnectWithoutCartInput | CartNftCreateOrConnectWithoutCartInput[]
    upsert?: CartNftUpsertWithWhereUniqueWithoutCartInput | CartNftUpsertWithWhereUniqueWithoutCartInput[]
    createMany?: CartNftCreateManyCartInputEnvelope
    set?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    disconnect?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    delete?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    connect?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    update?: CartNftUpdateWithWhereUniqueWithoutCartInput | CartNftUpdateWithWhereUniqueWithoutCartInput[]
    updateMany?: CartNftUpdateManyWithWhereWithoutCartInput | CartNftUpdateManyWithWhereWithoutCartInput[]
    deleteMany?: CartNftScalarWhereInput | CartNftScalarWhereInput[]
  }

  export type CartNftUncheckedUpdateManyWithoutCartNestedInput = {
    create?: XOR<CartNftCreateWithoutCartInput, CartNftUncheckedCreateWithoutCartInput> | CartNftCreateWithoutCartInput[] | CartNftUncheckedCreateWithoutCartInput[]
    connectOrCreate?: CartNftCreateOrConnectWithoutCartInput | CartNftCreateOrConnectWithoutCartInput[]
    upsert?: CartNftUpsertWithWhereUniqueWithoutCartInput | CartNftUpsertWithWhereUniqueWithoutCartInput[]
    createMany?: CartNftCreateManyCartInputEnvelope
    set?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    disconnect?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    delete?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    connect?: CartNftWhereUniqueInput | CartNftWhereUniqueInput[]
    update?: CartNftUpdateWithWhereUniqueWithoutCartInput | CartNftUpdateWithWhereUniqueWithoutCartInput[]
    updateMany?: CartNftUpdateManyWithWhereWithoutCartInput | CartNftUpdateManyWithWhereWithoutCartInput[]
    deleteMany?: CartNftScalarWhereInput | CartNftScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FounderCreatesocialMediaUrlInput = {
    set: string[]
  }

  export type FounderUpdatesocialMediaUrlInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumStatusNftNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusNft | EnumStatusNftFieldRefInput<$PrismaModel> | null
    in?: $Enums.StatusNft[] | ListEnumStatusNftFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StatusNft[] | ListEnumStatusNftFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStatusNftNullableFilter<$PrismaModel> | $Enums.StatusNft | null
  }

  export type NestedEnumStatusNftNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusNft | EnumStatusNftFieldRefInput<$PrismaModel> | null
    in?: $Enums.StatusNft[] | ListEnumStatusNftFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StatusNft[] | ListEnumStatusNftFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStatusNftNullableWithAggregatesFilter<$PrismaModel> | $Enums.StatusNft | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStatusNftNullableFilter<$PrismaModel>
    _max?: NestedEnumStatusNftNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CartCreateWithoutAccountInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nfts?: CartNftCreateNestedManyWithoutCartInput
  }

  export type CartUncheckedCreateWithoutAccountInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nfts?: CartNftUncheckedCreateNestedManyWithoutCartInput
  }

  export type CartCreateOrConnectWithoutAccountInput = {
    where: CartWhereUniqueInput
    create: XOR<CartCreateWithoutAccountInput, CartUncheckedCreateWithoutAccountInput>
  }

  export type CollectionCreateWithoutAccountInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    avatar?: string | null
    cover?: string | null
    url?: string | null
    nfts?: NftCreateNestedManyWithoutCollectionInput
    categories?: CollectionCategoryCreateNestedManyWithoutCollectionInput
  }

  export type CollectionUncheckedCreateWithoutAccountInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    avatar?: string | null
    cover?: string | null
    url?: string | null
    nfts?: NftUncheckedCreateNestedManyWithoutCollectionInput
    categories?: CollectionCategoryUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type CollectionCreateOrConnectWithoutAccountInput = {
    where: CollectionWhereUniqueInput
    create: XOR<CollectionCreateWithoutAccountInput, CollectionUncheckedCreateWithoutAccountInput>
  }

  export type CollectionCreateManyAccountInputEnvelope = {
    data: CollectionCreateManyAccountInput | CollectionCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type CartUpsertWithoutAccountInput = {
    update: XOR<CartUpdateWithoutAccountInput, CartUncheckedUpdateWithoutAccountInput>
    create: XOR<CartCreateWithoutAccountInput, CartUncheckedCreateWithoutAccountInput>
    where?: CartWhereInput
  }

  export type CartUpdateToOneWithWhereWithoutAccountInput = {
    where?: CartWhereInput
    data: XOR<CartUpdateWithoutAccountInput, CartUncheckedUpdateWithoutAccountInput>
  }

  export type CartUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nfts?: CartNftUpdateManyWithoutCartNestedInput
  }

  export type CartUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nfts?: CartNftUncheckedUpdateManyWithoutCartNestedInput
  }

  export type CollectionUpsertWithWhereUniqueWithoutAccountInput = {
    where: CollectionWhereUniqueInput
    update: XOR<CollectionUpdateWithoutAccountInput, CollectionUncheckedUpdateWithoutAccountInput>
    create: XOR<CollectionCreateWithoutAccountInput, CollectionUncheckedCreateWithoutAccountInput>
  }

  export type CollectionUpdateWithWhereUniqueWithoutAccountInput = {
    where: CollectionWhereUniqueInput
    data: XOR<CollectionUpdateWithoutAccountInput, CollectionUncheckedUpdateWithoutAccountInput>
  }

  export type CollectionUpdateManyWithWhereWithoutAccountInput = {
    where: CollectionScalarWhereInput
    data: XOR<CollectionUpdateManyMutationInput, CollectionUncheckedUpdateManyWithoutAccountInput>
  }

  export type CollectionScalarWhereInput = {
    AND?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
    OR?: CollectionScalarWhereInput[]
    NOT?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
    id?: StringFilter<"Collection"> | string
    createdAt?: DateTimeFilter<"Collection"> | Date | string
    updatedAt?: DateTimeFilter<"Collection"> | Date | string
    title?: StringNullableFilter<"Collection"> | string | null
    description?: StringNullableFilter<"Collection"> | string | null
    avatar?: StringNullableFilter<"Collection"> | string | null
    cover?: StringNullableFilter<"Collection"> | string | null
    url?: StringNullableFilter<"Collection"> | string | null
    accoutnId?: StringFilter<"Collection"> | string
  }

  export type AccountCreateWithoutCollectionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    policyId: string
    address: string
    email: string
    name: string
    description: string
    rating?: number | null
    cover: string
    avatar: string
    socialMediaUrl?: AccountCreatesocialMediaUrlInput | string[]
    followed?: number | null
    validate?: boolean
    cart?: CartCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutCollectionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    policyId: string
    address: string
    email: string
    name: string
    description: string
    rating?: number | null
    cover: string
    avatar: string
    socialMediaUrl?: AccountCreatesocialMediaUrlInput | string[]
    followed?: number | null
    validate?: boolean
    cart?: CartUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutCollectionsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutCollectionsInput, AccountUncheckedCreateWithoutCollectionsInput>
  }

  export type NftCreateWithoutCollectionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    validate?: boolean
    policyId: string
    assetName: string
    status?: $Enums.StatusNft | null
    countOfTransaction?: number | null
    cart?: CartNftCreateNestedManyWithoutNftInput
  }

  export type NftUncheckedCreateWithoutCollectionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    validate?: boolean
    policyId: string
    assetName: string
    status?: $Enums.StatusNft | null
    countOfTransaction?: number | null
    cart?: CartNftUncheckedCreateNestedManyWithoutNftInput
  }

  export type NftCreateOrConnectWithoutCollectionInput = {
    where: NftWhereUniqueInput
    create: XOR<NftCreateWithoutCollectionInput, NftUncheckedCreateWithoutCollectionInput>
  }

  export type NftCreateManyCollectionInputEnvelope = {
    data: NftCreateManyCollectionInput | NftCreateManyCollectionInput[]
    skipDuplicates?: boolean
  }

  export type CollectionCategoryCreateWithoutCollectionInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutCollectionsInput
  }

  export type CollectionCategoryUncheckedCreateWithoutCollectionInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
  }

  export type CollectionCategoryCreateOrConnectWithoutCollectionInput = {
    where: CollectionCategoryWhereUniqueInput
    create: XOR<CollectionCategoryCreateWithoutCollectionInput, CollectionCategoryUncheckedCreateWithoutCollectionInput>
  }

  export type CollectionCategoryCreateManyCollectionInputEnvelope = {
    data: CollectionCategoryCreateManyCollectionInput | CollectionCategoryCreateManyCollectionInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithoutCollectionsInput = {
    update: XOR<AccountUpdateWithoutCollectionsInput, AccountUncheckedUpdateWithoutCollectionsInput>
    create: XOR<AccountCreateWithoutCollectionsInput, AccountUncheckedCreateWithoutCollectionsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutCollectionsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutCollectionsInput, AccountUncheckedUpdateWithoutCollectionsInput>
  }

  export type AccountUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policyId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    cover?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    socialMediaUrl?: AccountUpdatesocialMediaUrlInput | string[]
    followed?: NullableIntFieldUpdateOperationsInput | number | null
    validate?: BoolFieldUpdateOperationsInput | boolean
    cart?: CartUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policyId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    cover?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    socialMediaUrl?: AccountUpdatesocialMediaUrlInput | string[]
    followed?: NullableIntFieldUpdateOperationsInput | number | null
    validate?: BoolFieldUpdateOperationsInput | boolean
    cart?: CartUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type NftUpsertWithWhereUniqueWithoutCollectionInput = {
    where: NftWhereUniqueInput
    update: XOR<NftUpdateWithoutCollectionInput, NftUncheckedUpdateWithoutCollectionInput>
    create: XOR<NftCreateWithoutCollectionInput, NftUncheckedCreateWithoutCollectionInput>
  }

  export type NftUpdateWithWhereUniqueWithoutCollectionInput = {
    where: NftWhereUniqueInput
    data: XOR<NftUpdateWithoutCollectionInput, NftUncheckedUpdateWithoutCollectionInput>
  }

  export type NftUpdateManyWithWhereWithoutCollectionInput = {
    where: NftScalarWhereInput
    data: XOR<NftUpdateManyMutationInput, NftUncheckedUpdateManyWithoutCollectionInput>
  }

  export type NftScalarWhereInput = {
    AND?: NftScalarWhereInput | NftScalarWhereInput[]
    OR?: NftScalarWhereInput[]
    NOT?: NftScalarWhereInput | NftScalarWhereInput[]
    id?: StringFilter<"Nft"> | string
    createdAt?: DateTimeFilter<"Nft"> | Date | string
    updatedAt?: DateTimeFilter<"Nft"> | Date | string
    validate?: BoolFilter<"Nft"> | boolean
    policyId?: StringFilter<"Nft"> | string
    assetName?: StringFilter<"Nft"> | string
    status?: EnumStatusNftNullableFilter<"Nft"> | $Enums.StatusNft | null
    collectionId?: StringFilter<"Nft"> | string
    countOfTransaction?: IntNullableFilter<"Nft"> | number | null
  }

  export type CollectionCategoryUpsertWithWhereUniqueWithoutCollectionInput = {
    where: CollectionCategoryWhereUniqueInput
    update: XOR<CollectionCategoryUpdateWithoutCollectionInput, CollectionCategoryUncheckedUpdateWithoutCollectionInput>
    create: XOR<CollectionCategoryCreateWithoutCollectionInput, CollectionCategoryUncheckedCreateWithoutCollectionInput>
  }

  export type CollectionCategoryUpdateWithWhereUniqueWithoutCollectionInput = {
    where: CollectionCategoryWhereUniqueInput
    data: XOR<CollectionCategoryUpdateWithoutCollectionInput, CollectionCategoryUncheckedUpdateWithoutCollectionInput>
  }

  export type CollectionCategoryUpdateManyWithWhereWithoutCollectionInput = {
    where: CollectionCategoryScalarWhereInput
    data: XOR<CollectionCategoryUpdateManyMutationInput, CollectionCategoryUncheckedUpdateManyWithoutCollectionInput>
  }

  export type CollectionCategoryScalarWhereInput = {
    AND?: CollectionCategoryScalarWhereInput | CollectionCategoryScalarWhereInput[]
    OR?: CollectionCategoryScalarWhereInput[]
    NOT?: CollectionCategoryScalarWhereInput | CollectionCategoryScalarWhereInput[]
    createdAt?: DateTimeFilter<"CollectionCategory"> | Date | string
    updatedAt?: DateTimeFilter<"CollectionCategory"> | Date | string
    collectionId?: StringFilter<"CollectionCategory"> | string
    categoryId?: StringFilter<"CollectionCategory"> | string
  }

  export type CollectionCreateWithoutCategoriesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    avatar?: string | null
    cover?: string | null
    url?: string | null
    account: AccountCreateNestedOneWithoutCollectionsInput
    nfts?: NftCreateNestedManyWithoutCollectionInput
  }

  export type CollectionUncheckedCreateWithoutCategoriesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    avatar?: string | null
    cover?: string | null
    url?: string | null
    accoutnId: string
    nfts?: NftUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type CollectionCreateOrConnectWithoutCategoriesInput = {
    where: CollectionWhereUniqueInput
    create: XOR<CollectionCreateWithoutCategoriesInput, CollectionUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutCollectionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
  }

  export type CategoryUncheckedCreateWithoutCollectionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
  }

  export type CategoryCreateOrConnectWithoutCollectionsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutCollectionsInput, CategoryUncheckedCreateWithoutCollectionsInput>
  }

  export type CollectionUpsertWithoutCategoriesInput = {
    update: XOR<CollectionUpdateWithoutCategoriesInput, CollectionUncheckedUpdateWithoutCategoriesInput>
    create: XOR<CollectionCreateWithoutCategoriesInput, CollectionUncheckedCreateWithoutCategoriesInput>
    where?: CollectionWhereInput
  }

  export type CollectionUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: CollectionWhereInput
    data: XOR<CollectionUpdateWithoutCategoriesInput, CollectionUncheckedUpdateWithoutCategoriesInput>
  }

  export type CollectionUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    account?: AccountUpdateOneRequiredWithoutCollectionsNestedInput
    nfts?: NftUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    accoutnId?: StringFieldUpdateOperationsInput | string
    nfts?: NftUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type CategoryUpsertWithoutCollectionsInput = {
    update: XOR<CategoryUpdateWithoutCollectionsInput, CategoryUncheckedUpdateWithoutCollectionsInput>
    create: XOR<CategoryCreateWithoutCollectionsInput, CategoryUncheckedCreateWithoutCollectionsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutCollectionsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutCollectionsInput, CategoryUncheckedUpdateWithoutCollectionsInput>
  }

  export type CategoryUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CollectionCategoryCreateWithoutCategoryInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    collection: CollectionCreateNestedOneWithoutCategoriesInput
  }

  export type CollectionCategoryUncheckedCreateWithoutCategoryInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    collectionId: string
  }

  export type CollectionCategoryCreateOrConnectWithoutCategoryInput = {
    where: CollectionCategoryWhereUniqueInput
    create: XOR<CollectionCategoryCreateWithoutCategoryInput, CollectionCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type CollectionCategoryCreateManyCategoryInputEnvelope = {
    data: CollectionCategoryCreateManyCategoryInput | CollectionCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CollectionCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CollectionCategoryWhereUniqueInput
    update: XOR<CollectionCategoryUpdateWithoutCategoryInput, CollectionCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<CollectionCategoryCreateWithoutCategoryInput, CollectionCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type CollectionCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CollectionCategoryWhereUniqueInput
    data: XOR<CollectionCategoryUpdateWithoutCategoryInput, CollectionCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type CollectionCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: CollectionCategoryScalarWhereInput
    data: XOR<CollectionCategoryUpdateManyMutationInput, CollectionCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CollectionCreateWithoutNftsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    avatar?: string | null
    cover?: string | null
    url?: string | null
    account: AccountCreateNestedOneWithoutCollectionsInput
    categories?: CollectionCategoryCreateNestedManyWithoutCollectionInput
  }

  export type CollectionUncheckedCreateWithoutNftsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    avatar?: string | null
    cover?: string | null
    url?: string | null
    accoutnId: string
    categories?: CollectionCategoryUncheckedCreateNestedManyWithoutCollectionInput
  }

  export type CollectionCreateOrConnectWithoutNftsInput = {
    where: CollectionWhereUniqueInput
    create: XOR<CollectionCreateWithoutNftsInput, CollectionUncheckedCreateWithoutNftsInput>
  }

  export type CartNftCreateWithoutNftInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    cart: CartCreateNestedOneWithoutNftsInput
  }

  export type CartNftUncheckedCreateWithoutNftInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    cartId: string
  }

  export type CartNftCreateOrConnectWithoutNftInput = {
    where: CartNftWhereUniqueInput
    create: XOR<CartNftCreateWithoutNftInput, CartNftUncheckedCreateWithoutNftInput>
  }

  export type CartNftCreateManyNftInputEnvelope = {
    data: CartNftCreateManyNftInput | CartNftCreateManyNftInput[]
    skipDuplicates?: boolean
  }

  export type CollectionUpsertWithoutNftsInput = {
    update: XOR<CollectionUpdateWithoutNftsInput, CollectionUncheckedUpdateWithoutNftsInput>
    create: XOR<CollectionCreateWithoutNftsInput, CollectionUncheckedCreateWithoutNftsInput>
    where?: CollectionWhereInput
  }

  export type CollectionUpdateToOneWithWhereWithoutNftsInput = {
    where?: CollectionWhereInput
    data: XOR<CollectionUpdateWithoutNftsInput, CollectionUncheckedUpdateWithoutNftsInput>
  }

  export type CollectionUpdateWithoutNftsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    account?: AccountUpdateOneRequiredWithoutCollectionsNestedInput
    categories?: CollectionCategoryUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateWithoutNftsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    accoutnId?: StringFieldUpdateOperationsInput | string
    categories?: CollectionCategoryUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type CartNftUpsertWithWhereUniqueWithoutNftInput = {
    where: CartNftWhereUniqueInput
    update: XOR<CartNftUpdateWithoutNftInput, CartNftUncheckedUpdateWithoutNftInput>
    create: XOR<CartNftCreateWithoutNftInput, CartNftUncheckedCreateWithoutNftInput>
  }

  export type CartNftUpdateWithWhereUniqueWithoutNftInput = {
    where: CartNftWhereUniqueInput
    data: XOR<CartNftUpdateWithoutNftInput, CartNftUncheckedUpdateWithoutNftInput>
  }

  export type CartNftUpdateManyWithWhereWithoutNftInput = {
    where: CartNftScalarWhereInput
    data: XOR<CartNftUpdateManyMutationInput, CartNftUncheckedUpdateManyWithoutNftInput>
  }

  export type CartNftScalarWhereInput = {
    AND?: CartNftScalarWhereInput | CartNftScalarWhereInput[]
    OR?: CartNftScalarWhereInput[]
    NOT?: CartNftScalarWhereInput | CartNftScalarWhereInput[]
    createdAt?: DateTimeFilter<"CartNft"> | Date | string
    updatedAt?: DateTimeFilter<"CartNft"> | Date | string
    cartId?: StringFilter<"CartNft"> | string
    nftId?: StringFilter<"CartNft"> | string
  }

  export type CartCreateWithoutNftsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account: AccountCreateNestedOneWithoutCartInput
  }

  export type CartUncheckedCreateWithoutNftsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    accountId: string
  }

  export type CartCreateOrConnectWithoutNftsInput = {
    where: CartWhereUniqueInput
    create: XOR<CartCreateWithoutNftsInput, CartUncheckedCreateWithoutNftsInput>
  }

  export type NftCreateWithoutCartInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    validate?: boolean
    policyId: string
    assetName: string
    status?: $Enums.StatusNft | null
    countOfTransaction?: number | null
    collection: CollectionCreateNestedOneWithoutNftsInput
  }

  export type NftUncheckedCreateWithoutCartInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    validate?: boolean
    policyId: string
    assetName: string
    status?: $Enums.StatusNft | null
    collectionId: string
    countOfTransaction?: number | null
  }

  export type NftCreateOrConnectWithoutCartInput = {
    where: NftWhereUniqueInput
    create: XOR<NftCreateWithoutCartInput, NftUncheckedCreateWithoutCartInput>
  }

  export type CartUpsertWithoutNftsInput = {
    update: XOR<CartUpdateWithoutNftsInput, CartUncheckedUpdateWithoutNftsInput>
    create: XOR<CartCreateWithoutNftsInput, CartUncheckedCreateWithoutNftsInput>
    where?: CartWhereInput
  }

  export type CartUpdateToOneWithWhereWithoutNftsInput = {
    where?: CartWhereInput
    data: XOR<CartUpdateWithoutNftsInput, CartUncheckedUpdateWithoutNftsInput>
  }

  export type CartUpdateWithoutNftsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutCartNestedInput
  }

  export type CartUncheckedUpdateWithoutNftsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: StringFieldUpdateOperationsInput | string
  }

  export type NftUpsertWithoutCartInput = {
    update: XOR<NftUpdateWithoutCartInput, NftUncheckedUpdateWithoutCartInput>
    create: XOR<NftCreateWithoutCartInput, NftUncheckedCreateWithoutCartInput>
    where?: NftWhereInput
  }

  export type NftUpdateToOneWithWhereWithoutCartInput = {
    where?: NftWhereInput
    data: XOR<NftUpdateWithoutCartInput, NftUncheckedUpdateWithoutCartInput>
  }

  export type NftUpdateWithoutCartInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validate?: BoolFieldUpdateOperationsInput | boolean
    policyId?: StringFieldUpdateOperationsInput | string
    assetName?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumStatusNftFieldUpdateOperationsInput | $Enums.StatusNft | null
    countOfTransaction?: NullableIntFieldUpdateOperationsInput | number | null
    collection?: CollectionUpdateOneRequiredWithoutNftsNestedInput
  }

  export type NftUncheckedUpdateWithoutCartInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validate?: BoolFieldUpdateOperationsInput | boolean
    policyId?: StringFieldUpdateOperationsInput | string
    assetName?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumStatusNftFieldUpdateOperationsInput | $Enums.StatusNft | null
    collectionId?: StringFieldUpdateOperationsInput | string
    countOfTransaction?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountCreateWithoutCartInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    policyId: string
    address: string
    email: string
    name: string
    description: string
    rating?: number | null
    cover: string
    avatar: string
    socialMediaUrl?: AccountCreatesocialMediaUrlInput | string[]
    followed?: number | null
    validate?: boolean
    collections?: CollectionCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutCartInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    policyId: string
    address: string
    email: string
    name: string
    description: string
    rating?: number | null
    cover: string
    avatar: string
    socialMediaUrl?: AccountCreatesocialMediaUrlInput | string[]
    followed?: number | null
    validate?: boolean
    collections?: CollectionUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutCartInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutCartInput, AccountUncheckedCreateWithoutCartInput>
  }

  export type CartNftCreateWithoutCartInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nft: NftCreateNestedOneWithoutCartInput
  }

  export type CartNftUncheckedCreateWithoutCartInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nftId: string
  }

  export type CartNftCreateOrConnectWithoutCartInput = {
    where: CartNftWhereUniqueInput
    create: XOR<CartNftCreateWithoutCartInput, CartNftUncheckedCreateWithoutCartInput>
  }

  export type CartNftCreateManyCartInputEnvelope = {
    data: CartNftCreateManyCartInput | CartNftCreateManyCartInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithoutCartInput = {
    update: XOR<AccountUpdateWithoutCartInput, AccountUncheckedUpdateWithoutCartInput>
    create: XOR<AccountCreateWithoutCartInput, AccountUncheckedCreateWithoutCartInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutCartInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutCartInput, AccountUncheckedUpdateWithoutCartInput>
  }

  export type AccountUpdateWithoutCartInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policyId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    cover?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    socialMediaUrl?: AccountUpdatesocialMediaUrlInput | string[]
    followed?: NullableIntFieldUpdateOperationsInput | number | null
    validate?: BoolFieldUpdateOperationsInput | boolean
    collections?: CollectionUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutCartInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policyId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    cover?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    socialMediaUrl?: AccountUpdatesocialMediaUrlInput | string[]
    followed?: NullableIntFieldUpdateOperationsInput | number | null
    validate?: BoolFieldUpdateOperationsInput | boolean
    collections?: CollectionUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type CartNftUpsertWithWhereUniqueWithoutCartInput = {
    where: CartNftWhereUniqueInput
    update: XOR<CartNftUpdateWithoutCartInput, CartNftUncheckedUpdateWithoutCartInput>
    create: XOR<CartNftCreateWithoutCartInput, CartNftUncheckedCreateWithoutCartInput>
  }

  export type CartNftUpdateWithWhereUniqueWithoutCartInput = {
    where: CartNftWhereUniqueInput
    data: XOR<CartNftUpdateWithoutCartInput, CartNftUncheckedUpdateWithoutCartInput>
  }

  export type CartNftUpdateManyWithWhereWithoutCartInput = {
    where: CartNftScalarWhereInput
    data: XOR<CartNftUpdateManyMutationInput, CartNftUncheckedUpdateManyWithoutCartInput>
  }

  export type CollectionCreateManyAccountInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    avatar?: string | null
    cover?: string | null
    url?: string | null
  }

  export type CollectionUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    nfts?: NftUpdateManyWithoutCollectionNestedInput
    categories?: CollectionCategoryUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    nfts?: NftUncheckedUpdateManyWithoutCollectionNestedInput
    categories?: CollectionCategoryUncheckedUpdateManyWithoutCollectionNestedInput
  }

  export type CollectionUncheckedUpdateManyWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    cover?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NftCreateManyCollectionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    validate?: boolean
    policyId: string
    assetName: string
    status?: $Enums.StatusNft | null
    countOfTransaction?: number | null
  }

  export type CollectionCategoryCreateManyCollectionInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId: string
  }

  export type NftUpdateWithoutCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validate?: BoolFieldUpdateOperationsInput | boolean
    policyId?: StringFieldUpdateOperationsInput | string
    assetName?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumStatusNftFieldUpdateOperationsInput | $Enums.StatusNft | null
    countOfTransaction?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: CartNftUpdateManyWithoutNftNestedInput
  }

  export type NftUncheckedUpdateWithoutCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validate?: BoolFieldUpdateOperationsInput | boolean
    policyId?: StringFieldUpdateOperationsInput | string
    assetName?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumStatusNftFieldUpdateOperationsInput | $Enums.StatusNft | null
    countOfTransaction?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: CartNftUncheckedUpdateManyWithoutNftNestedInput
  }

  export type NftUncheckedUpdateManyWithoutCollectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validate?: BoolFieldUpdateOperationsInput | boolean
    policyId?: StringFieldUpdateOperationsInput | string
    assetName?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumStatusNftFieldUpdateOperationsInput | $Enums.StatusNft | null
    countOfTransaction?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CollectionCategoryUpdateWithoutCollectionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutCollectionsNestedInput
  }

  export type CollectionCategoryUncheckedUpdateWithoutCollectionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type CollectionCategoryUncheckedUpdateManyWithoutCollectionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type CollectionCategoryCreateManyCategoryInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    collectionId: string
  }

  export type CollectionCategoryUpdateWithoutCategoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collection?: CollectionUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type CollectionCategoryUncheckedUpdateWithoutCategoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collectionId?: StringFieldUpdateOperationsInput | string
  }

  export type CollectionCategoryUncheckedUpdateManyWithoutCategoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collectionId?: StringFieldUpdateOperationsInput | string
  }

  export type CartNftCreateManyNftInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    cartId: string
  }

  export type CartNftUpdateWithoutNftInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cart?: CartUpdateOneRequiredWithoutNftsNestedInput
  }

  export type CartNftUncheckedUpdateWithoutNftInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cartId?: StringFieldUpdateOperationsInput | string
  }

  export type CartNftUncheckedUpdateManyWithoutNftInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cartId?: StringFieldUpdateOperationsInput | string
  }

  export type CartNftCreateManyCartInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nftId: string
  }

  export type CartNftUpdateWithoutCartInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nft?: NftUpdateOneRequiredWithoutCartNestedInput
  }

  export type CartNftUncheckedUpdateWithoutCartInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nftId?: StringFieldUpdateOperationsInput | string
  }

  export type CartNftUncheckedUpdateManyWithoutCartInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nftId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AccountCountOutputTypeDefaultArgs instead
     */
    export type AccountCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollectionCountOutputTypeDefaultArgs instead
     */
    export type CollectionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollectionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NftCountOutputTypeDefaultArgs instead
     */
    export type NftCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NftCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CartCountOutputTypeDefaultArgs instead
     */
    export type CartCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CartCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollectionDefaultArgs instead
     */
    export type CollectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollectionCategoryDefaultArgs instead
     */
    export type CollectionCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollectionCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NftDefaultArgs instead
     */
    export type NftArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NftDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CartNftDefaultArgs instead
     */
    export type CartNftArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CartNftDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CartDefaultArgs instead
     */
    export type CartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CartDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GuideDefaultArgs instead
     */
    export type GuideArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GuideDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlogDefaultArgs instead
     */
    export type BlogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatisticsDefaultArgs instead
     */
    export type StatisticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatisticsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FounderDefaultArgs instead
     */
    export type FounderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FounderDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}