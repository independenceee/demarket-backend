generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  policyId       String
  address        String       @unique
  email          String       @unique
  name           String
  description    String
  rating         Float?       @db.Real
  cover          String
  avatar         String
  socialMediaUrl String[]
  followed       Int?         @default(0)
  validate       Boolean      @default(false)
  cart           Cart?
  collections    Collection[]
}

model Collection {
  id          String               @id @default(uuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  title       String?
  description String?
  avatar      String?
  cover       String?
  url         String?
  accoutnId   String
  account     Account              @relation(fields: [accoutnId], references: [id])
  nfts        Nft[]
  categories  CollectionCategory[]
}

model CollectionCategory {
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  categoryId   String
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([categoryId, collectionId])
}

model Category {
  id          String               @id @default(uuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  name        String
  collections CollectionCategory[]
}

model Nft {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  validate Boolean @default(false)

  policyId  String @unique
  assetName String @unique

  status             StatusNft?
  collectionId       String
  countOfTransaction Int?       @default(0)

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  cart       CartNft[]
}

model CartNft {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  nftId     String
  nft       Nft      @relation(fields: [nftId], references: [id], onDelete: Cascade)

  @@id([cartId, nftId])
}

model Cart {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accountId String    @unique
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  nfts      CartNft[]
}

model Guide {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    String
  title       String
  description String
  url         String
}

model Blog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Statistics {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  totalTransaction Int @default(0)
  totalProduct    Int @default(0)
  totalCollection Int @default(0)
  totalTrending   Int @default(0)
  totalAuthor     Int @default(0)
}

model Founder {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  fistName       String
  lastName       String
  role           String
  company        String   @default("BLOCKALPHA")
  avatar         String   @db.Text
  linkedin       String @db.Text
  twitter        String @db.Text
}

enum StatusNft {
  SOLDOUT
  SELLING
}
