generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  policyId       String
  address        String       @unique
  email          String       @unique
  name           String
  description    String
  rating         Float?       @db.Real
  cover          String
  avatar         String
  socialMediaUrl String[]
  followed       Int?         @default(0)
  validate       Boolean      @default(false)
  cart           Cart?
  collections    Collection[]
}

model Collection {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String?
  description String?
  avatar      String?
  cover       String?
  url         String?
  accoutnId   String
  account     Account    @relation(fields: [accoutnId], references: [id])
  NFTS        NFT[]
  category    Category[]
}

model Category {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String
  collectionId String?
  collection   Collection? @relation(fields: [collectionId], references: [id])
}

model NFT {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  validate Boolean @default(false)

  policyId  String @unique
  assetName String @unique

  status             StatusNft?
  collectionId       String
  totalTransaction   Int?       @default(0)
  countOfTransaction Int?       @default(0)

  collection Collection @relation(fields: [collectionId], references: [id])
  cartId     String?
  cart       Cart?      @relation(fields: [cartId], references: [id])
}

model Cart {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accountId String   @unique
  account   Account  @relation(fields: [accountId], references: [id])
  nfts      NFT[]
}

model Guide {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    String
  title       String
  description String
  url         String
}

model Blog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Statistics {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalProduct    Int @default(0)
  totalCollection Int @default(0)
  totalTrending   Int @default(0)
  totalAuthor     Int @default(0)
}

model Founder {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  fistName       String
  lastName       String
  role           String
  company        String   @default("BLOCKALPHA")
  avatar         String   @db.Text
  socialMediaUrl String[]
}

enum StatusNft {
  SOLDOUT
  COMMINGSOON
  SELLING
}
