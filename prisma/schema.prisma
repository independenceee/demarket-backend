generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  policyId     String        @unique
  address      String        @unique
  email        String        @unique
  name         String
  description  String
  rating       Float         @db.Real
  cover        String
  avatar       String
  socialMediaUrl String[]
  followed     Int           @default(0)
  validate     Boolean       @default(false)
  cart         Cart?
  collections  Collection[]
}

model Collection {
  id          String               @id @default(uuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  title       String?
  description String?
  avatar      String?
  cover       String?
  url         String?
  accoutnId   String
  categories  CategoryCollection[]
  account     Account              @relation(fields: [accoutnId], references: [id])
  NFTS        NFT[]
}

model CategoryCollection {
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  categoryId   String
  collectionId String
  category     Category   @relation(fields: [categoryId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id])

  @@id([categoryId, collectionId])
}

model Category {
  id          String               @id @default(uuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  name        String
  collections CategoryCollection[]
}

model NFT {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  validate     Boolean  @default(false)
  policyId     String   @unique
  assetName    String   @unique
  collectionId String

  totalTransaction   BigInt     @default(0)
  status             StatusNft
  countOfTransaction Int?       @default(0)
  collection         Collection @relation(fields: [collectionId], references: [id])
  carts              NFTCart[]
}

model NFTCart {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String
  nftId     String
  cart      Cart     @relation(fields: [cartId], references: [id])
  nft       NFT      @relation(fields: [nftId], references: [id])

  @@id([nftId, cartId])
}

model Cart {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  policyId  String    @unique
  assetName String    @unique
  accountId String    @unique
  account   Account   @relation(fields: [accountId], references: [id])
  nfts      NFTCart[]
}



model Guide {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    String
  title       String
  description String
  url         String
}


model Blog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Statistics {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalProduct    Int @default(0)
  totalCollection Int @default(0)
  totalTrending   Int @default(0)
  totalAuthor     Int @default(0)
}

model Founder {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime @updatedAt
  fistName    String
  lastName    String
  role        String
  company     String        @default("BLOCKALPHA")
  avatar      String        @db.Text
  socialMediaUrl String[]
}

enum StatusNft {
  SOLDOUT
  COMMINGSOON
  SELLING
}
