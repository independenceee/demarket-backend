generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

model Account {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  walletAddress String     @unique @db.Text
  stakeKey      String?    @db.Text
  email         String?    @db.Text
  userName      String?    @db.Text
  description   String?    @db.Text
  rating        Float?     @db.Real
  cover         String?    @db.Text
  avatar        String?    @db.Text
  telegram      String?    @db.Text
  linkedin      String?    @db.Text
  twitter       String?    @db.Text
  validate      Boolean?   @default(false)
  cart          Cart?
  like          Likes[]
  followers     Follows[]  @relation("following")
  following     Follows[]  @relation("follower")
  Comments      Comments[]
}



model Follows {
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    Account  @relation("follower", fields: [followerId], references: [id])
  followerId  String   @db.Text
  following   Account  @relation("following", fields: [followingId], references: [id])
  followingId String   @db.Text

  @@id([followerId, followingId])
  @@unique([followerId, followingId])
}

model Likes {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accountId String   @db.Text
  account   Account  @relation(fields: [accountId], references: [id])
  nftId     String
  nft       Nft      @relation(fields: [nftId], references: [id])

  @@id([accountId, nftId])
}

model Comments {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountId String  @db.Text
  account   Account @relation(fields: [accountId], references: [id])

  nftId String @db.Text
  nft   Nft    @relation(fields: [nftId], references: [id])

  @@id([accountId, nftId])
}

model Nft {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  validate           Boolean       @default(false)
  policyId           String        @unique
  assetName          String        @unique
  status             StatusNft?
  countOfTransaction Int?          @default(0)
  cart               CartNft[]
  NftCategory        NftCategory[]
  like               Likes[]
  Comments           Comments[]
}

model NftCategory {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  nftId      String
  nft        Nft      @relation(fields: [nftId], references: [id], onDelete: Cascade)

  @@id([nftId, categoryId])
}

model Category {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @db.Text
  slug        String        @db.Text
  NftCategory NftCategory[]
}

model CartNft {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  nftId     String
  nft       Nft      @relation(fields: [nftId], references: [id], onDelete: Cascade)

  @@id([cartId, nftId])
}

model Cart {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accountId String    @unique
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  nfts      CartNft[]
}

model Blog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StatusNft {
  SOLDOUT
  SELLING
}

model Guide {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    String   @db.Text
  title       String   @db.Text
  description String   @db.Text
  imageUrl    String   @db.Text
  videoUrl    String   @db.Text
}

model Founder {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName  String   @db.Text
  lastName  String   @db.Text
  role      String   @db.Text
  company   String   @default("BLOCKALPHA")
  avatar    String   @db.Text
  telegram  String   @db.Text
  linkedin  String   @db.Text
  twitter   String   @db.Text
}

model Statistics {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  totalTransaction Int      @default(0)
  totalProduct     Int      @default(0)
  totalCollection  Int      @default(0)
  totalTrending    Int      @default(0)
  totalAuthor      Int      @default(0)
}
